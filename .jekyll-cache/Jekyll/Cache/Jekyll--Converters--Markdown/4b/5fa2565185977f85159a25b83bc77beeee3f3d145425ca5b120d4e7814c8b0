I"V<h1 id="spring-framework">Spring Framework</h1>
<ul>
  <li>핵심기술  : 스프링 DI 컨테이너, AOP, 이벤트, 기타</li>
  <li>웹 기술 : 스프링 MVC, 스프링 WebFlux</li>
  <li>데이터 접근 기술 : 트랜잭션, JDBC, ORM 지원, MXL 지원</li>
  <li>기술 통합 : 캐시, 이메일, 원격접근, 스케줄링</li>
  <li>테스트 : 스프링 기반 테스트 지원</li>
  <li>언어 : 코틀린, 그룹비</li>
</ul>

<h1 id="spring-boot">Spring Boot</h1>
<ul>
  <li>스프링을 편리하게 사용할 수 있도록 지원, 최근에는 기본으로 사용</li>
  <li>단독으로 실행할 수 있는 스프링 애플리케이션을 쉽게 생성</li>
  <li>Tomcat 같은 웹 서버를 내장해서 별도의 웹 서버를 설치하지 않아도 됨</li>
  <li>손쉬운 빌드 구성을 위한 starter 종속성 제공</li>
  <li>스프링과 3rd parth(외부) 라이브러리 자동 구성</li>
  <li>메트릭, 상태 확인, 외부 구성 같은 프로덕션 준비 기능 제공</li>
  <li>관례에 의한 간결한 설정</li>
</ul>

<h3 id="핵심-개념-">핵심 개념 :</h3>
<p>좋은 객체지향 의 어플리케이션을 개발 할 수 있도록 도와줌.</p>

<p><strong>스프링의 꽃 : 다형성(역할과 구현을 분리) =&gt; 클라이언트는 내부구조를 몰라도 된다.</strong></p>
<ul>
  <li>운전자 - 자동차(자동차가 바뀌어도 운전자는 운전이 가능하다!)</li>
  <li>공연 무대(배우가 바뀌어도 공연이 가능하다!)</li>
  <li>키보드, 마우스, 세상의 표준 인터페이스들</li>
  <li>정렬 알고리즘(기능만 충실하다면 다른 알고리즘으로 대체 가능!)</li>
  <li>할인 정책 로직</li>
  <li><span style="color:red">본질은 클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경할 수 있다.</span></li>
</ul>

<h1 id="좋은-객체-지향-설계의-5가지-원칙solid">좋은 객체 지향 설계의 5가지 원칙(SOLID)</h1>
<ul>
  <li>SRP : 단일 책임 원칙(single responsibility principle)
    <ul>
      <li>한 클래스는 하나의 책임만 가져야 한다.</li>
      <li>하나의 책임이라는 것은 모호하다.(클 수 있고, 작을 수 있다)</li>
      <li><span style="color:red">중요한 기준은 변경</span> 이다. 변경이 있을 때 파급효과가 적을 수록 좋음.</li>
    </ul>
  </li>
  <li>OCP : 개방-폐쇄 원칙(open/closed principle)
    <ul>
      <li>소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다(기존 코드 는 건들지말고, 새로운 class 생성).</li>
      <li>구현 객체를 변경하려면 클라이언트 코드를 변경해야 한다.</li>
    </ul>
  </li>
  <li>LSP : 리스코프 치환 원칙(liskov substitution principle)
    <ul>
      <li>프로그램의 객체는 프로그램의 정확성을 꺠뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.</li>
      <li>ex) 자동차 인터페이스의 엑셀은 앞으로 가라는 기능, 뒤로 가게 구현하면 LSP 위반</li>
    </ul>
  </li>
  <li>ISP : 인터페이스 분리 원칙(interface segregation principle)
    <ul>
      <li>특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나 보다 낫다.</li>
      <li>자동차 인터페이스 -&gt; 운전 인터페이스, 정비 인터페이스로 분리.</li>
      <li>사용자 클라이언트 -&gt; 운전자 클라이언트, 정비사 클라이언트로 분리.</li>
      <li>분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않음.</li>
    </ul>
  </li>
  <li>DIP : 의존관계 역전 원칙(dependency inversion principle)
    <ul>
      <li>프로그래머는 “추상화에 의존해야지, 구체화에 의존 하면 안된다”. 의존성 주입은 이 원칙을 따르는 방법 중 하나.</li>
      <li>구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻</li>
      <li>ex) 운전자는 자동차의 역할 만 알면 되고, k3, 아반떼 테슬라 의 기능을 알필요가 없다.</li>
      <li><span style="color:red">역할(Role)에 의존하게 해야 한다.</span> 클라이언트가 인터페이스에 의존해야 유연하게 구현체를 변경 할 수 있다. 구현체에 의존하면 변경할때 매우 어려움!!!</li>
    </ul>
  </li>
</ul>

<h1 id="정리">정리</h1>
<ul>
  <li>객체 지향의 핵심은 다형성</li>
  <li>다형성 만으로는 쉽게 부품을 갈아 끼우듯이 개발할 수 없다.</li>
  <li>다형성 만으로는 구현 객체를 변경할 때 클라이언트 코드도 함께 변경된다.</li>
  <li>다형성 만으로는 OCP, DIP를 지킬수 없다.</li>
  <li>모든 설계에 역할과 구현을 분리하자.</li>
  <li>자동차, 공연의 예를 떠올려보자.</li>
  <li>애플리케이션 설계도 공연을 설계 하듯이 배역만 만들어두고, 배우는 언제든지 유연하게 변경 할 수 있도록 만드는 것 이 좋은 객체 지향 설계이다.</li>
  <li>이상적으로는 모든 설계에 인터페이스를 부여하자</li>
</ul>
:ET