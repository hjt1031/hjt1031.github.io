I"T<h2 id="모든-것이-httphypertext-transfer-protocol">모든 것이 HTTP(HyperText Transfer Protocol)</h2>

<ul>
  <li>TCP : HTTP/1.1, HTTP/2</li>
  <li>UDP : HTTP/3</li>
  <li>현재 HTTP/2, HTTP/3 도 점점 증가</li>
</ul>

<h2 id="클라이언트-서버-구조">클라이언트 서버 구조</h2>
<p><strong>Request Response 구조</strong></p>
<ul>
  <li>클라이언트는 서버에 요청을 보내고, 응답을 대기</li>
  <li>서버가 요청에 대한 결과를 만들어서 응답
    <h2 id="무상태stateless-상태유지stateful">무상태(Stateless), 상태유지(Stateful)</h2>
  </li>
  <li>상태유지 : 클라이언트와 서버와 1:1 로 연결을 해줘야 함</li>
  <li>단점 : 기존 서버가 다운 되면 처음부터다시 요청을 해줘야함</li>
  <li>무상태 : 클라이언트와 서버가 1:N 으로 연결 되어있다.</li>
  <li>로그인이 필요 없는 단순 페이지에 유리하다.
    <h2 id="연결-유지하는-모델">연결 유지하는 모델</h2>
    <p>클라이언트3 대 서버 1 대 중  클라이언트 서버에다 요청 할때 서버측에서 한개로  돌려가면서 수정 서버는 응답을 주고 바로 클라이언트와 연결을 끓는다 (서버 자원을 매우 효율적으로 사용 할 수 있음.</p>
  </li>
</ul>

<h1 id="http메세지">HTTP메세지</h1>
<h2 id="순서">순서</h2>
<p>시작 라인 : GET(리소스 조회), POST(요청 내역 처리), PUT, DELETE 
요청 대상 : “/” 로 시작하는 절대경로 ? 쿼리경로</p>

<h2 id="응답-메시지">응답 메시지</h2>
<ul>
  <li>200 : 성공</li>
  <li>400 : 클라이언트 요청 오류</li>
  <li>500 : 서버 내부 오류</li>
</ul>

<h1 id="http-메서드">HTTP 메서드</h1>
<h2 id="리소스와-행위를-분리">리소스와 행위를 분리</h2>
<p><em>가장 중요한 것은 리소스를 식별 하는 것</em></p>
<ul>
  <li>URI는 리소스만 식별!</li>
  <li>리소스와 해당 리소스를 대상으로 하는 행위를 분리
    <ul>
      <li>리소스 : 회원</li>
      <li>행위 : 조회, 등록, 삭제, 변경</li>
    </ul>
  </li>
  <li>리소스는 명사,  행위는 동사(미네랄을 캐라)</li>
  <li>행위(메서드)는 어떻게 구분?</li>
</ul>

<h2 id="http-메서드-종류">HTTP 메서드 종류</h2>
<ul>
  <li>GET : 리소스 조회
    <ul>
      <li>서버에 전달하고 싶은 query(쿼리 파라미터, 쿼리 스트링) 을 통해 전달</li>
      <li>메세지 바디를 사용해서 데이터를 전달 가능, 하지만 지원하지 않는 곳 이 많음</li>
    </ul>
  </li>
  <li>POST : 요청 데이터 처리, 주로 등록에 사용
    <ul>
      <li>요청 데이터 처리</li>
      <li>메시지 바디를 통해 서버로 요청 데이터로 전달</li>
      <li>주로 전달된 데이터로 신규 리소스 등록, 프로세스 처리에 사용</li>
    </ul>
  </li>
  <li>PUT : 리소스를 대체, 해당 리소스가 없으면 생성
    <ul>
      <li>클라이언트가 리소스 위치를 알고 URI 지정</li>
    </ul>
  </li>
  <li>PATCH : 리소스 부분 변경</li>
  <li>DELETE : 리소스 삭제</li>
</ul>

<h2 id="기타-메서드">기타 메서드</h2>
<ul>
  <li>HEAD : GET과 동일하지만 메시지 부분을 제외하고, 상태 줄과 헤더만 변환</li>
  <li>OPTIONS : 대상 리소스에 대한 통신 가능 옵션(메서드)을 설명(주로 CORS에서 사용)</li>
  <li>CONNECT : 대상 자원으로 식별되는 서버에 대한 터널을 설정</li>
  <li>TRACK : 대상 리소스에 대한 경로를 따라 메시지 루프백 테스트를 수행</li>
</ul>

<h2 id="http-메서드의-속성">HTTP 메서드의 속성</h2>
<ul>
  <li>안전
**호출해도 리소스를 변경하지 않는다.</li>
  <li>멱등
**한 번 호출하든 두번 호출하든 100번 호출하든 결과가 똑같다.
GET, DELETE, PUT
88자동 복구 메커니즘
88서버가 TIMEOUT 등으로 정상 응답을 못주었을때 계속 요청 해도 괜찮다(delete)</li>
  <li>캐시가능
88GET, HEAD, POST, PATCH 캐시 가능
88실제로는 GET, HEAD 정도만 캐시로 사용
88POST, PATCH는 본문 내용까지 캐시 키로 고려해야 하는데, 구현이 쉽지 않음</li>
</ul>

<h1 id="http-메서드-활용">HTTP 메서드 활용</h1>
<h2 id="클라이언트에서-서버로-데이터-전송">클라이언트에서 서버로 데이터 전송</h2>
<p>쿼리 파라미터를 통한 데이터 전송(동적)
GET
주로 정렬 필터(검색어)
메시지 바디를 통한 데이터 전송
POST, PUT, PATCH
회원 가입, 상품 주문, 리소스 등록, 리소스 변경</p>

<h2 id="http-api-설계-예시">HTTP API 설계 예시</h2>
<p>컬렉션
서버가 관리하는 리소스 디렉토리
서버가 리소서의 URI를 생성하고 관리
여기서 컬렉션은/members
HTML FORM 
GET, POST 만 지원
AJAX 같은 기술을 사용해서 해결 가능
컨트롤 URI
GET, POST 만 지원하므로 제약이 있음.
이런 제약을 해결하기 위해 동사로 된 리소스 경로 사용
POST의 /new, /edit, /delete 가 컨트롤 URI
HTTP 메서드로 해결하기 애매한 경우 사용(HTTP API 포함)</p>
<h1 id="참고하면-좋은-uri-설계-개념">참고하면 좋은 URI 설계 개념</h1>
<p>문서
단일 개념(파일 하나, 객체 인스턴스, 데이터베이스 row)
컬렉션
서버가 관리하는 리소스 디렉터리
서버가 리소스의 URI를 생성하고 관리
스토어
클라이언트가 관리하는 자원 저장소
클라이언트가 리소스의 URI를 알고 관리
컨트롤러, 컨트롤 URI
문서, 컬렉션, 스토어로 해결하기 어려운 추가 프로세스 실행
동사를 직접 사용</p>
:ET