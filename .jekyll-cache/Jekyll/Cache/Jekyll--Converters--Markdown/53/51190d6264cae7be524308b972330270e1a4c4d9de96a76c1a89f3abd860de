I"{/<h1 id="상속">상속</h1>
<p>상속(Interitance): 부모 클래스의 메소드 및 필드를 가져옴으로써 코드 중복을 줄일 수 있는 장점<br />
오버라이딩 : 부모 클래스에 있었던 메소드를 자식 클래스에서 재정의(덮어쓰기)하면서 코드 변경 가능<br />
오버로딩 : 부모클래스가 갖고 있는 메소드의 형태를<br />
자식클래스에서 조금 바꿔 “이름을 같게” 사용할 수 있다. (메소드의 매개변수 타입, 개수변화 등등)<br />
원래 메소드란 이름이 같을 수 없는데 이 경우 가능하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Cal</span><span class="o">{</span>  
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">sum</span><span class="o">(</span><span class="kt">int</span> <span class="n">v1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">v2</span><span class="o">){</span>
        <span class="k">return</span> <span class="n">v1</span><span class="o">+</span><span class="n">v2</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// Overloading</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">sum</span><span class="o">(</span><span class="kt">int</span> <span class="n">v1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">v2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">v3</span><span class="o">){</span>
        <span class="k">return</span> <span class="n">v1</span><span class="o">+</span><span class="n">v2</span><span class="o">+</span><span class="n">v3</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Cal3</span> <span class="kd">extends</span> <span class="nc">Cal</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">minus</span><span class="o">(</span><span class="kt">int</span> <span class="n">v1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">v2</span><span class="o">){</span>
        <span class="k">return</span> <span class="n">v1</span><span class="o">-</span><span class="n">v2</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// Overriding</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">sum</span><span class="o">(</span><span class="kt">int</span> <span class="n">v1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">v2</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Cal3!!"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">v1</span><span class="o">+</span><span class="n">v2</span><span class="o">;</span>
    <span class="o">}</span>
 
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">InheritanceApp</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Cal</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Cal</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">1</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">));</span>
 
        <span class="nc">Cal3</span> <span class="n">c3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Cal3</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c3</span><span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">1</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c3</span><span class="o">.</span><span class="na">minus</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">1</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c3</span><span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">1</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Cal2</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">sum</span><span class="o">(</span><span class="kt">int</span> <span class="n">v1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">v2</span><span class="o">){</span>
        <span class="k">return</span> <span class="n">v1</span><span class="o">+</span><span class="n">v2</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">minus</span><span class="o">(</span><span class="kt">int</span> <span class="n">v1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">v2</span><span class="o">){</span>
        <span class="k">return</span> <span class="n">v1</span><span class="o">-</span><span class="n">v2</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="k">this</span> <span class="o">&amp;</span> <span class="kd">super</span>
<span class="k">this</span><span class="o">:</span> <span class="n">자신</span> <span class="n">클래스</span> <span class="n">내의</span> <span class="n">메서드</span><span class="o">,</span> <span class="n">필드를</span> <span class="n">지칭할</span> <span class="n">때</span> <span class="n">사용</span>
<span class="kd">super</span><span class="o">:</span> <span class="n">부모</span> <span class="n">클래스</span> <span class="n">내의</span> <span class="n">메서드</span><span class="o">,</span> <span class="n">필드를</span> <span class="n">지칭할</span> <span class="n">때</span> <span class="n">사용</span>
<span class="kd">class</span> <span class="nc">Cal</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">sum</span><span class="o">(</span><span class="kt">int</span> <span class="n">v1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">v2</span><span class="o">){</span>
        <span class="k">return</span> <span class="n">v1</span><span class="o">+</span><span class="n">v2</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// Overloading</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">sum</span><span class="o">(</span><span class="kt">int</span> <span class="n">v1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">v2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">v3</span><span class="o">){</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="n">v1</span><span class="o">,</span><span class="n">v2</span><span class="o">)+</span><span class="n">v3</span><span class="o">;</span> <span class="c1">//위에 sum 파라미터로 전달됨</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Cal3</span> <span class="kd">extends</span> <span class="nc">Cal</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">minus</span><span class="o">(</span><span class="kt">int</span> <span class="n">v1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">v2</span><span class="o">){</span>
        <span class="k">return</span> <span class="n">v1</span><span class="o">-</span><span class="n">v2</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// Overriding</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">sum</span><span class="o">(</span><span class="kt">int</span> <span class="n">v1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">v2</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Cal3!!"</span><span class="o">);</span>
        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="n">v1</span><span class="o">,</span><span class="n">v2</span><span class="o">);</span> <span class="c1">//부모클래스인 Cal의  sum메소드로 리턴해준다.</span>
    <span class="o">}</span>
 
<span class="o">}</span>
</code></pre></div></div>

<h1 id="차장님">차장님</h1>
<p>public static void main(String [] args)<br />
사용법은 Test.main()<br />
new를 사용하지 않고 바로 연결해서 사용 가능 한 메소드이다.<br />
반복적으로 계속 사용 하는 메소드의 경우 공통 같은 곳에서 사용한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isNull</span><span class="o">(</span><span class="nc">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
   <span class="k">if</span><span class="o">(</span><span class="n">obj</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> 
      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p>null을 체크해서 boolean 값을 반환 하는데 많이 사용 됨</p>

<p>메모리<br />
ArrayList, Map 인스턴스는 메모리의 저장<br />
long(8byte), int(4byte) 는 stack메모리의 저장.<br />
1byte = 8bit 사용가능범위 -127 ~ 128 = 256<br />
2byte = 256 * 256<br />
ex) int i = 0; 이면 stack메모리 에 4byte 만큼 할당이 된다.<br />
ex) Test t1 = new Test(); 은 Test는 인스턴스 및 object는  메모리의 저장됨 (=heap메모리,) , t1 은 stack 메모리에 저장(변수도 statck)
static 은 static 메모리에 저장된다.</p>
:ET