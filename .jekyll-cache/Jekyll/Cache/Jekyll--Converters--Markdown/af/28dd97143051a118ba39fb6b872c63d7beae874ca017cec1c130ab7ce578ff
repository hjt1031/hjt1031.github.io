I"E<h3 id="spring-이란">Spring 이란?</h3>

<ul>
  <li>자바 엔터프라이즈 개발을 편리하게 해주는 <strong>오픈소스 경량급 애플리케이션 프레임워크</strong>이다.</li>
</ul>

<h3 id="spring의-특징">Spring의 특징</h3>

<ul>
  <li><strong>경량 컨테이너</strong>로서 자바의 객체를 Spring이 직접 관리함
    <ul>
      <li>각각의 객체 생성, 소멸과 같은 라이프 사이클을 스프링이 대신 관리해주며, 스프링으로부터 객체를 얻어올 수 있다.</li>
    </ul>
  </li>
  <li><strong>제어 역행</strong>(<strong>IOC</strong> : Inversion of Control)
    <ul>
      <li>애플리케이션 간의 느슨한 결합을 도모</li>
      <li>컨트롤의 제어권이 사용자가 아니라 프레임워크에 있어 필요에 따라 스프링에서 사용자의 코드를 호출한다.</li>
    </ul>
  </li>
  <li><strong>의존성 주입</strong>(<strong>DI</strong> : Dependency Injection)
    <ul>
      <li>각각의 계층이나 서비스들 간에 의존성이 존재할 경우 프레임워크가 서로 연결시켜준다.</li>
      <li>객체에 객체가 필요로하는 다른 객체를 생성자, 새터를 통해서 주입하는 것</li>
      <li>배터리일체형 핸드폰과 분리형 핸드폰의 차이 -&gt; 분리형이 훨씬 유지보수가 쉽다.</li>
    </ul>
  </li>
  <li><strong>관점지향 프로그래밍</strong>(<strong>AOP</strong> : Aspect-Oriented Programming)
    <ul>
      <li>트랜잭션이나 로깅, 보안과 같이 여러 모듈에서 <strong>공통적으로 사용하는 기능의 경우 해당 기능을 분리하여 관리할 수 있다.</strong></li>
      <li>Interceptor, Filter와 비슷</li>
      <li>Interceptor : 특정 URI로 요청시 Controller로 가능 요청을 가로채는 역할.</li>
    </ul>
  </li>
  <li>애플리케이션 객체의 생명 주기와 설정을 포함하고 관리한다는 점에서 일종의 “컨테이너”라고 할 수 있다.
    <ul>
      <li>iBatis, myBatis나 Hibernate 등 완성도가 높은 데이터베이스처리 라이브러리와 연결할 수 있는 인터페이스를 제공한다.</li>
    </ul>
  </li>
  <li>트랜잭션 관리 프레임워크
    <ul>
      <li>추상화된 트랜잭션 관리를 지원하며 설정파일(xml, java, properties 등)을 이용한 선언적인 방식 및 프로그래밍을 통한 방식을 모두 지원한다.</li>
    </ul>
  </li>
  <li>모델-뷰-컨트롤러 패턴(MVC 패턴)
    <ul>
      <li>웹 프로그래밍 개발 시 거의 표준적인 방식인 “<strong>Spring MVC</strong>“라 불리는 <strong>MVC</strong>패턴을 사용한다.</li>
      <li><strong>DispatcherServlet</strong>이 <strong>Controller</strong> 역할을 담당하고 각종 요청을 적절한 서비스에 분산시켜주며 이를 각 서비스들이 처리를 하여 결과를 생성하고 그 결과는 다양한 <strong>View</strong>를 통해서 사용자에게 보여진다.</li>
    </ul>
  </li>
  <li>배치 프레임워크
    <ul>
      <li>스프링은 특정 시간대에 실행하거나 대용량의 자료를 처리하는데 쓰이는 <strong>일괄 처리(Batch Processing)</strong>을 지원하는 배치 프레임워크를 제공한다. 기본적으로 스프링 배치는 <strong>Quartz</strong> 기반으로 동작한다.</li>
    </ul>
  </li>
</ul>
:ET