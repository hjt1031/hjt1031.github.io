I"P<h1 id="인스턴스">인스턴스</h1>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Print</span> <span class="o">{</span>
<span class="o">....</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
<span class="nc">Print</span> <span class="n">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Print</span><span class="o">();</span> <span class="c1">// print 클래스를 복제한다. (print 라는 데이터 타입(클래스) 이다)</span>
<span class="o">....</span>
<span class="o">}</span>

</code></pre></div></div>
<p>static :정적이다.
class Foo{
    public static String classVar = “I class var”;
    public String instanceVar = “I instance var”;
    public static void classMethod() {
        System.out.println(classVar); // Ok
//      System.out.println(instanceVar); // Error
    }
    public void instanceMethod() {
        System.out.println(classVar); // Ok
        System.out.println(instanceVar); // Ok
    }
}
public class StaticApp {</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public static void main(String[] args) {
    System.out.println(Foo.classVar); // OK //      System.out.println(Foo.instanceVar); // Error
    Foo.classMethod(); //      Foo.instanceMethod();
     
    Foo f1 = new Foo();
    Foo f2 = new Foo(); //      
    System.out.println(f1.classVar); // I class var
    System.out.println(f1.instanceVar); // I instance var //      
    f1.classVar = "changed by f1";
    System.out.println(Foo.classVar); // changed by f1
    System.out.println(f2.classVar);  // changed by f1 //      
    f1.instanceVar = "changed by f1";
    System.out.println(f1.instanceVar); // changed by f1
    System.out.println(f2.instanceVar); // I instance var
}
</code></pre></div></div>

<p>}
```
static 
static 공유메모리 저장, 링크 -&gt; 누적<br />
접근법 : 클래스.클래스<static>멤버</static></p>

<p>instance 독립메모리 저장 -&gt; 매번 초기화<br />
접근법 : 클래스명 인스턴스명 = new 클래스();<br />
복제되었다고 생각하면 된다.</p>

<p>생성자  : 인스턴스가 생성될 때 최초로 실행 되어야 할 작업이 있으면 사용한다. (초기화 작업)<br />
Print p1 = new Print(“—-“);</p>

<p>public String delimiter = “”<br />
public Print(String delimiter) {<br />
   this.delimiter = delimiter;<br />
}
this 를 붙여주는 이유는 클래스의 인스턴스 변수인지 아니면 매개변수로 들어오는 변수인지 구분지어 주기 위해 사용한다.</p>
:ET