I"3<p><strong>주소 문자열을 URL 객체로 변환</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">url</span><span class="dl">'</span><span class="p">);</span> <span class="c1">//모듈호출</span>
<span class="c1">//parse() 와 format() 메소드를 호출 할 수 있음</span>
<span class="nx">parse</span><span class="p">()</span> <span class="p">:</span> <span class="nx">https</span><span class="p">:</span><span class="c1">// 로 시작하는 주소 문자열을 URL 객체로 만들어줌 (요청 파라미터 문자열을 파싱하여 요청 파라미터 객체로 만들어 줌)</span>
<span class="nx">format</span><span class="p">()</span> <span class="p">:</span> <span class="err">원래의</span> <span class="err">주소</span> <span class="err">문자열로</span> <span class="err">돌려놓음</span><span class="p">(</span><span class="err">요청</span> <span class="err">파라미터</span> <span class="err">객체를</span> <span class="err">문자열로</span> <span class="err">변환</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>이벤트</strong>
이벤트 : 한쪽에서 다른 쪽으로 어떤 일이 발생했음을 알려주는 것입니다. 이때 다른 쪽에서 이 이벤트를 받고 싶다면 이벤트 리스너를 등록 할 수 있습니다.
이벤트 리스너는 특정 이벤트가 전달되었을 때 그 이벤트를 처리할 수 있도록 만들어 둔 것을 말합니다.</p>

<p>노드의 객체는 EventEmitter 를 상속 받을 수있다. 상속 후엔 EventEmitter 객체의 on() 과 emit() 메소드를 사용 할 수 있다.
on(event, listener) : 지정한 이벤트의 리스너를 추가합니다.
once(event,listener) : 지정한 이벤트의 리스너를 추가하지만 한 번 실행한 후에는 자동으로 리스너가 제거됩니다.
removeListener(event,listener) : 지정한 이벤트에 대한 리스너를 제거합니다.</p>

<p><strong>파일 다루기</strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">readFile</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="p">[</span><span class="nx">encoding</span><span class="p">],</span> <span class="p">[</span><span class="nx">callback</span><span class="p">])</span> <span class="p">:</span> <span class="err">비동기식</span> <span class="nx">IO</span><span class="err">로</span> <span class="err">파일을</span> <span class="err">읽어</span> <span class="err">들입니다</span><span class="p">.</span>
<span class="nx">readFileSyne</span><span class="p">(</span><span class="nx">filename</span><span class="p">,[</span><span class="nx">encoding</span><span class="p">])</span> <span class="p">:</span> <span class="err">동기식</span> <span class="nx">IO</span><span class="err">로</span> <span class="err">파일을</span> <span class="err">읽어</span> <span class="err">들입니다</span><span class="p">.</span>
<span class="nx">writeFile</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">encoding</span><span class="o">=</span><span class="dl">'</span><span class="s1">utf8</span><span class="dl">'</span><span class="p">,[</span><span class="nx">callback</span><span class="p">])</span> <span class="p">:</span> <span class="err">비동기식</span> <span class="nx">IO</span><span class="err">로</span> <span class="err">파일을</span> <span class="err">씁니다</span><span class="p">.</span>
<span class="nx">writeFileSync</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span><span class="nx">data</span><span class="p">,</span><span class="nx">encoding</span><span class="o">=</span><span class="dl">'</span><span class="s1">utf8</span><span class="dl">'</span><span class="p">)</span> <span class="p">:</span> <span class="err">동기식</span> <span class="nx">IO</span><span class="err">로</span> <span class="err">파일을</span> <span class="err">씁니다</span><span class="p">.</span>

</code></pre></div></div>
:ET