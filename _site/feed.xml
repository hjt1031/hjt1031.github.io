<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-11-25T16:25:59+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">juntae</title><subtitle>JavaScript And Node.js</subtitle><author><name>동센</name></author><entry><title type="html">[얄코]비동기 프로그래밍</title><link href="http://localhost:4000/callback/" rel="alternate" type="text/html" title="[얄코]비동기 프로그래밍" /><published>2020-11-25T00:00:00+09:00</published><updated>2020-11-25T00:00:00+09:00</updated><id>http://localhost:4000/callback</id><content type="html" xml:base="http://localhost:4000/callback/">&lt;p&gt;동기는 한줄인 열차라고 생각하면 된다. 앞에열차가 느리면 뒤에 열차도 덩달아 느리게 가게 된다.
비동기는  여러 선로의 열차에 앞차가 막히면 다른 선로로 배정해 나가는 방식이다.&lt;/p&gt;

&lt;p&gt;비동기 함수 call back 이라 생각하면 된다.&lt;/p&gt;

&lt;p&gt;만약 여러번에 걸쳐서 무엇을 찾을때 함수안에 함수.. 를 사용하게 된다.. 이런게 여러개 반복되면서 나타나는게
콜백 지옥이다.&lt;/p&gt;

&lt;p&gt;콜백 지옥을 해결하기위해 나온게 
Promise (체이닝 방식 .then 사용) 를 사용하게 되면 순차적으로 처리 가능
하지만 Promise 는 polyfill 등의 라이브러리 없이는 익스플로러에서는 동작하지 않으니 주의해야함!&lt;/p&gt;

&lt;p&gt;그리고
asyme await 도 비동기방식의 한 종류이며 동기 작업처럼 작성 할 수 있다.&lt;/p&gt;

&lt;p&gt;await를 붙여주면 이 함수가 끝나기 전에 다음 작업으로 넘어갈 수 없다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;학생&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;학번&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;학생&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;정보&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;학생정보&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;조회&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;학생&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;학번&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//원래라면 그냥 바로 밑으로 흘러가는 비동기 처리가 되겠지만 await 를 써주면 동기처럼 사용가능&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;고교&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_DB_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;주소&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;고교&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_DB_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;주소&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;조회&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;학생&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;정보&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;고교명&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>동센</name></author><summary type="html">동기는 한줄인 열차라고 생각하면 된다. 앞에열차가 느리면 뒤에 열차도 덩달아 느리게 가게 된다. 비동기는 여러 선로의 열차에 앞차가 막히면 다른 선로로 배정해 나가는 방식이다.</summary></entry><entry><title type="html">[AWS]Auto Scaling (오토스케일링)</title><link href="http://localhost:4000/awsauto-scaling/" rel="alternate" type="text/html" title="[AWS]Auto Scaling (오토스케일링)" /><published>2020-11-24T00:00:00+09:00</published><updated>2020-11-24T00:00:00+09:00</updated><id>http://localhost:4000/awsauto-scaling</id><content type="html" xml:base="http://localhost:4000/awsauto-scaling/">&lt;p&gt;컴퓨터가 필요하면 자동으로 생성하고 필요없으면 자동으로 삭제해준다.(과금이 발생하지 않게 해주는 기능)&lt;/p&gt;

&lt;p&gt;AUTO SCALING 목록에 보면
시작구성과, Auto Scaling group 이 있다.
먼저 Auto Scaling group에 먼저 생성을 해준다. 그러면&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;오토스케일의 이미지를 선택한다&lt;/li&gt;
  &lt;li&gt;이미지화 시켯던 내AMI를 선택한다.&lt;/li&gt;
  &lt;li&gt;인스턴스 성능 선택한다.&lt;/li&gt;
  &lt;li&gt;name 정하고 스토리지 정하고&lt;/li&gt;
  &lt;li&gt;시큐리티 그룹을 만든다.&lt;/li&gt;
  &lt;li&gt;그다음 오토스케일 그룹을 만드는 것이 나오는데&lt;/li&gt;
  &lt;li&gt;1번탭에 몇개의 인스턴스로 지정하는지 로드밸런싱 연결할건지 등등..&lt;/li&gt;
  &lt;li&gt;2번탭의(Confilgure scaling pollcles:조정 정책 구성)   첫번째 (이 그룹을 초기 크기로 유지) 가있는데 이건 1번탭에서 예를 들어 10개를 생성했다고 치고 그 10개중에서 4개의 인스턴스가 죽었다고 가정하면 그 죽은 인스턴스를 자동생성해준다.
두번째는 (조정 정책을 사용하여 이 그룹의 용량 조정)최대와 최소의 인스턴스를 설정해준다. 예를들어 각각의 input 박스에 1과 3을 입력하면 최대1개이상과 3개이하의 인스턴스를 생성한다.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>동센</name></author><summary type="html">컴퓨터가 필요하면 자동으로 생성하고 필요없으면 자동으로 삭제해준다.(과금이 발생하지 않게 해주는 기능)</summary></entry><entry><title type="html">[aws]기초용어</title><link href="http://localhost:4000/aws/" rel="alternate" type="text/html" title="[aws]기초용어" /><published>2020-11-24T00:00:00+09:00</published><updated>2020-11-24T00:00:00+09:00</updated><id>http://localhost:4000/aws</id><content type="html" xml:base="http://localhost:4000/aws/">&lt;p&gt;EC2 : Elastic Compute Cloud, 아마존 웹 서비스 중 대표적인 상품&lt;/p&gt;

&lt;p&gt;Instance : Instance 한개당 한대의 컴퓨터라 생각하면 된다&lt;/p&gt;

&lt;p&gt;온디맨드 인스턴스 : 필요할때 키고 필요없을땐 끊다. 우리가 컴퓨터를 필요할 때마다 켜고 끄고 할 수 있는 인스턴스를 의미&lt;/p&gt;

&lt;p&gt;예약 인스턴스 : 서버를 키는데 365일 동안 끄지 않는 경우면 예약 인스턴스를 사용하는게 훨씬 저렴하다. (3년치를 한꺼번에 사면 더 저렴하게 구매할 수 있다.)&lt;/p&gt;

&lt;p&gt;스팟 인스턴스 : 노는 컴퓨터를 많을 수록 많을 수록 저렴하다. 반대로 노는 컴퓨터가 없으면 일반 인스턴스 보다 더 가격이 많이 측정된다. 주로 데이터 분석, 백그라운드 작업, 배치 작업에 적합(가변적인 가격 정책을 갖고 있다.)&lt;/p&gt;</content><author><name>동센</name></author><summary type="html">EC2 : Elastic Compute Cloud, 아마존 웹 서비스 중 대표적인 상품</summary></entry><entry><title type="html">[AWS]터미널로 서버접속, ELB적용(ab 테스터)</title><link href="http://localhost:4000/aws-elbab/" rel="alternate" type="text/html" title="[AWS]터미널로 서버접속, ELB적용(ab 테스터)" /><published>2020-11-24T00:00:00+09:00</published><updated>2020-11-24T00:00:00+09:00</updated><id>http://localhost:4000/aws-elbab</id><content type="html" xml:base="http://localhost:4000/aws-elbab/">&lt;ol&gt;
  &lt;li&gt;두개의 인스턴스를 생성해준다.&lt;/li&gt;
  &lt;li&gt;$ ssh -i 터미널경로/aws_passward.pem ubuntu@public ip주소&lt;/li&gt;
  &lt;li&gt;$ sudo apt-get update 타이핑(ab 벤치마킹 테스터기, 업데이트 먼저 해줘야함)패키지 리스트 를 업데이트를 해준다.&lt;/li&gt;
  &lt;li&gt;$ sudo apt-get install apache2-utils 타이핑(ab벤치마킹 설치), 웹서버 설치는 $ sudo apt-get install apache2&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ELB적용&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;웹서버를 이미지를 만들어준다.(AMI)&lt;/li&gt;
  &lt;li&gt;load balances 를 들어가 웹서버 2개를 save 해준다.&lt;/li&gt;
  &lt;li&gt;DNS name 주소를 복사하면 우리가만든 웹서버에 접속하게된다.&lt;/li&gt;
  &lt;li&gt;접속 로그 보는 방법 $sudo tail -f /var/log/apach2/access.log ( DNS name 에 접속을 하면 한번은 웹서버1 한번은 웹서버2 에 접속하는걸 눈으로 확인할 수 있다,)&lt;/li&gt;
&lt;/ol&gt;</content><author><name>동센</name></author><summary type="html">두개의 인스턴스를 생성해준다. $ ssh -i 터미널경로/aws_passward.pem ubuntu@public ip주소 $ sudo apt-get update 타이핑(ab 벤치마킹 테스터기, 업데이트 먼저 해줘야함)패키지 리스트 를 업데이트를 해준다. $ sudo apt-get install apache2-utils 타이핑(ab벤치마킹 설치), 웹서버 설치는 $ sudo apt-get install apache2</summary></entry><entry><title type="html">[aws]인스턴스 에서 웹서버 사용</title><link href="http://localhost:4000/aws-1/" rel="alternate" type="text/html" title="[aws]인스턴스 에서 웹서버 사용" /><published>2020-11-24T00:00:00+09:00</published><updated>2020-11-24T00:00:00+09:00</updated><id>http://localhost:4000/aws-1</id><content type="html" xml:base="http://localhost:4000/aws-1/">&lt;ol&gt;
  &lt;li&gt;홈페이지로 로그인해 연결을 눌러 키를 터미널에 복사 붙여넣기 를 해서 접속한다.&lt;/li&gt;
  &lt;li&gt;아마존 EC2 인스턴스에 퍼블릭 DNS(IPv4)에 있는 주소를 복사해 주소창에 붙여넣기를 한다.&lt;/li&gt;
  &lt;li&gt;홈페이지에 우분투 라고 나오면 제대로 접속한게 맞는것이다.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>동센</name></author><summary type="html">홈페이지로 로그인해 연결을 눌러 키를 터미널에 복사 붙여넣기 를 해서 접속한다. 아마존 EC2 인스턴스에 퍼블릭 DNS(IPv4)에 있는 주소를 복사해 주소창에 붙여넣기를 한다. 홈페이지에 우분투 라고 나오면 제대로 접속한게 맞는것이다.</summary></entry><entry><title type="html">[aws]스트래스테스트</title><link href="http://localhost:4000/a/" rel="alternate" type="text/html" title="[aws]스트래스테스트" /><published>2020-11-24T00:00:00+09:00</published><updated>2020-11-24T00:00:00+09:00</updated><id>http://localhost:4000/a</id><content type="html" xml:base="http://localhost:4000/a/">&lt;p&gt;&lt;strong&gt;인스턴스 접속 : ssh -i 키위치/키이름.pem ubuntu@ip&lt;br /&gt;&lt;/strong&gt;
&lt;strong&gt;컴퓨터의 CPU 점유율 보기 : top &lt;br /&gt;&lt;/strong&gt;
ssh -i Desktop/dev/key/aws_password.pem ubuntu@54.180.2.171
&lt;strong&gt;sudo apt-get update : 컴퓨터에 프로그램 목록을 최신버전으로 업그레이드&lt;br /&gt;&lt;/strong&gt;
&lt;strong&gt;ab 프로그램 : 아파치에서 만든 부화발생기 (인스턴스 접속 후 ab 타이핑)&lt;br /&gt;&lt;/strong&gt;
&lt;strong&gt;requests  : 어떤 웹서버에 몇번의 접속을 시도하겠냐&lt;br /&gt;&lt;/strong&gt;
&lt;strong&gt;concurrency : 동시에 몇번의 접속을 시도하겠냐 &lt;br /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ex)concurrency 1 이고 requests 가 100 이면 접속한번하고 또접속한번하고 … 순차적으로 접속이됨&lt;br /&gt;
ex)concurrency 10 이고 requests가 100이면  한번에 10명이 접속하는 것과 똑같다&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h1 id=&quot;실험top-을-타이핑-해서-cpu-점유율-등-을-관찰-&quot;&gt;실험(top 을 타이핑 해서 cpu 점유율 등 을 관찰) &lt;br /&gt;&lt;/h1&gt;
&lt;/blockquote&gt;

&lt;p&gt;$ ab -n 400 -c 1 http:// ip주소/ &amp;lt;-끝에 슬래시를 꼭 붙여줘야한다. (400명의 사람이 동시접속1 (없다는 뜻))&lt;br /&gt;
요청 : 400&lt;br /&gt;
동시접속 : 1 &lt;br /&gt;
Time taken for tests(총소요시간):   9.641 seconds 약(9.641초)&lt;br /&gt;
Failed requests(실패):        0&lt;br /&gt;
Requests per second(초당처리속도):    41.49 [#/sec] &lt;br /&gt;
Time per request(개별초리속도(초)):       24.103 [ms]  ( 약 0.024초)&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;$ ab -n 400 -c 2 http:// ip주소/  (400명의 사람이 동시접속2)&lt;br /&gt;
요청 : 400&lt;br /&gt;
동시접속 : 2&lt;br /&gt;
Time taken for tests:   9.338 seconds&lt;br /&gt;
Failed requests:        0&lt;br /&gt;
Requests per second:    43.60 [#/sec] &lt;br /&gt;
Time per request:       46.688 [ms] &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;$ ab -n 400 -c 10 http:// ip주소/  (400명의 사람이 동시접속10)&lt;br /&gt;
요청 : 400&lt;br /&gt;
동시접속 : 10&lt;br /&gt;
Time taken for tests:   9.305 seconds&lt;br /&gt;
Failed requests:        0&lt;br /&gt;
Requests per second:    42.99 [#/sec] &lt;br /&gt;
Time per request:       232.628 [ms] &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;$ ab -n 400 -c 20 http:// ip주소/  (400명의 사람이 동시접속20)&lt;br /&gt;
요청 : 400&lt;br /&gt;
동시접속 : 10&lt;br /&gt;
Time taken for tests:   9.251 seconds&lt;br /&gt;
Failed requests:        0&lt;br /&gt;
Requests per second:    43.24 [#/sec] &lt;br /&gt;
Time per request:       462.548 [ms] &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;$ ab -n 400 -c 50 http:// ip주소/  (400명의 사람이 동시접속50)&lt;br /&gt;
요청 : 400&lt;br /&gt;
동시접속 : 10&lt;br /&gt;
Time taken for tests:   9.162 seconds&lt;br /&gt;
Failed requests:        0&lt;br /&gt;
Requests per second:    43.66 [#/sec] &lt;br /&gt;
Time per request:       1145.275 [ms] &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;$ ab -n 400 -c 100 http:// ip주소/  (400명의 사람이 동시접속100)&lt;br /&gt;
요청 : 400&lt;br /&gt;
동시접속 : 100&lt;br /&gt;
Time taken for tests:   9.120 seconds&lt;br /&gt;
Failed requests:        0&lt;br /&gt;
Requests per second:    43.86 [#/sec] &lt;br /&gt;
Time per request:       2279.948 [ms] &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;$ ab -n 400 -c 200 http:// ip주소/  (400명의 사람이 동시접속200)&lt;br /&gt;
요청 : 400&lt;br /&gt;
동시접속 : 200&lt;br /&gt;
Time taken for tests:   9.070 seconds&lt;br /&gt;
Failed requests:        0&lt;br /&gt;
Requests per second:    44.10 [#/sec] &lt;br /&gt;
Time per request:       4535.100 [ms]&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;동시접속이 많을 수록 사용자들은 느리게 접근하게 된다.&lt;/p&gt;</content><author><name>동센</name></author><summary type="html">인스턴스 접속 : ssh -i 키위치/키이름.pem ubuntu@ip 컴퓨터의 CPU 점유율 보기 : top ssh -i Desktop/dev/key/aws_password.pem ubuntu@54.180.2.171 sudo apt-get update : 컴퓨터에 프로그램 목록을 최신버전으로 업그레이드 ab 프로그램 : 아파치에서 만든 부화발생기 (인스턴스 접속 후 ab 타이핑) requests : 어떤 웹서버에 몇번의 접속을 시도하겠냐 concurrency : 동시에 몇번의 접속을 시도하겠냐</summary></entry><entry><title type="html">[nodejs]Mysql Module</title><link href="http://localhost:4000/nodejsmysql-module/" rel="alternate" type="text/html" title="[nodejs]Mysql Module" /><published>2020-11-24T00:00:00+09:00</published><updated>2020-11-24T00:00:00+09:00</updated><id>http://localhost:4000/nodejsmysql-module</id><content type="html" xml:base="http://localhost:4000/nodejsmysql-module/">&lt;p&gt;기본적으로 nodejs 모듈에는 mysql를 제어하는 모듈이 없다. 
pm install -S mysql 을 해주면 packson(dependencies) 에 추가가된다.  소스코드를 나중에 복제하고 사용할때 편리하기 위해&lt;/p&gt;

&lt;p&gt;```java
db.query(SELECT * FROM topic WHERE id=${query.id}`,function(error2,topic){ //이런식으로 쓰면 사용자에게 공격을 당할 수 있다.&lt;/p&gt;

&lt;p&gt;db.query(&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT * FROM topic WHERE id=?&lt;/code&gt;,[queryData.id],function(error2,topic){ //id에 ? 에 두번쨰 인자가 치환되서 들어간다.보안성이좋음&lt;/p&gt;

&lt;p&gt;response.writeHead(302, {Location: &lt;code class=&quot;highlighter-rouge&quot;&gt;/?id=${result.insertId}&lt;/code&gt;}); //추가된 id 을 가져오는 방법 (바로 추가된 id로 리다이렉션이 됨)&lt;/p&gt;</content><author><name>동센</name></author><summary type="html">기본적으로 nodejs 모듈에는 mysql를 제어하는 모듈이 없다. pm install -S mysql 을 해주면 packson(dependencies) 에 추가가된다. 소스코드를 나중에 복제하고 사용할때 편리하기 위해</summary></entry><entry><title type="html">[nodejs]express(Hello World!)</title><link href="http://localhost:4000/nodejsexpresshello-world/" rel="alternate" type="text/html" title="[nodejs]express(Hello World!)" /><published>2020-11-24T00:00:00+09:00</published><updated>2020-11-24T00:00:00+09:00</updated><id>http://localhost:4000/nodejsexpresshello-world</id><content type="html" xml:base="http://localhost:4000/nodejsexpresshello-world/"></content><author><name>동센</name></author><summary type="html"></summary></entry><entry><title type="html">[nodejs] Express 미들웨어</title><link href="http://localhost:4000/nodejsexpress/" rel="alternate" type="text/html" title="[nodejs] Express 미들웨어" /><published>2020-11-24T00:00:00+09:00</published><updated>2020-11-24T00:00:00+09:00</updated><id>http://localhost:4000/nodejsexpress</id><content type="html" xml:base="http://localhost:4000/nodejsexpress/">&lt;p&gt;Express 의 중요 기능 2가지&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;라우터&lt;/li&gt;
  &lt;li&gt;미들웨어&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;소프트웨어를 만들때 처음부터 끝까지 다만드는 경우는 없다.
다른사람이 만든 소프트웨어를 부품으로 해서 만든다. 이것을 미들웨어라고 생각하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//로설치&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;body 는 웹브라우저에서 요청한 정보 본체를 뜻한다.&lt;/p&gt;

&lt;p&gt;parser 는 분석&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bodyParser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;body-parser&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//맨위에 선언&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//로고쳐서 실행시켜준다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;압축하기(데이터가 너무많으면 압축을 해야한다.)&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compression&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compression&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requrie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;compression&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;미들웨어 만들기.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//공통으로 된 함수 &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//ex)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./data&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filelist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//글목록을 표현해주는 기능&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filelist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//그다음에 호출되어야 할 미들웨어가 담겨있다.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>동센</name></author><summary type="html">Express 의 중요 기능 2가지 라우터 미들웨어</summary></entry><entry><title type="html">[nodejs]API &amp;amp; Mysql</title><link href="http://localhost:4000/nodejsapi-mysql/" rel="alternate" type="text/html" title="[nodejs]API &amp; Mysql" /><published>2020-11-24T00:00:00+09:00</published><updated>2020-11-24T00:00:00+09:00</updated><id>http://localhost:4000/nodejsapi-mysql</id><content type="html" xml:base="http://localhost:4000/nodejsapi-mysql/">&lt;p&gt;API : Application Programming interface &lt;br /&gt;
개발자와 함수를 사용하는 개발자 들의 약속된 조작장치&lt;/p&gt;</content><author><name>동센</name></author><summary type="html">API : Application Programming interface 개발자와 함수를 사용하는 개발자 들의 약속된 조작장치</summary></entry></feed>