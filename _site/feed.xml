<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-05-12T09:45:09+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">juntae</title><subtitle>JavaScript And Node.js</subtitle><author><name>동센</name></author><entry><title type="html">[얄코]REST API</title><link href="http://localhost:4000/nodejsexpresshello-world1/" rel="alternate" type="text/html" title="[얄코]REST API" /><published>2020-05-12T00:00:00+09:00</published><updated>2020-05-12T00:00:00+09:00</updated><id>http://localhost:4000/nodejsexpresshello-world1</id><content type="html" xml:base="http://localhost:4000/nodejsexpresshello-world1/">&lt;p&gt;REST API는 정보들이 주고받아지는 데 있어서 개발자들 사이에 널리 쓰이는 일종의 형식&lt;/p&gt;

&lt;p&gt;어떤 기수링나 제품이 아니라, 형식이기 때문에 어떤 프로그래밍 언어를 쓰든 폼에 맞춰서 기능을 만들어내면 된다.&lt;/p&gt;

&lt;p&gt;REST API 는 결국 어떤 URI에 어떤 메소드를 사용할지 개발자들 사이에 널리 지켜지는 약속이다.&lt;/p&gt;

&lt;p&gt;ex) https://(도메인)/classes  이면 아마도 학원의반들 목록을 받아오는 요청 일것이다.
 그리고 https://(도메인)/classes/2 를 붙인 idx 고유 번호가 따라붙으면 보통은 인덱스 번호가 이 숫자인 반의 정보가 온다.&lt;/p&gt;

&lt;p&gt;REST API에서는 GET, POST, PUT ,DELETE, PATCH 를 주로 사용한다.
 POST, PUT, PATCH 에는 BODY 란 주머니가 있어서. 정보들을 GET 이나 DELETE 보다 많이 비교적 안전하게 보낼 수 있다.&lt;/p&gt;

&lt;p&gt;GET 는 주로 데이터를 read 하는데 사용하기
POST 는 create, 새로운 정보를 추가하는데 사용된다. url 로  https://(도메인)/classes/2/students 주고 body에 새 학생의 정보를 실어보낸다. 보통 idx 는 정보가 추가되면서 생성되기 때문에 따로 idx 를 줄 필요가 없다.  하지만 update 를 한다면,&lt;/p&gt;

&lt;p&gt;PUT 또는 PATCH 에 BODY에 실어서 정보를 보낸다.&lt;/p&gt;

&lt;p&gt;PUT은 정보를 통째로 갈아 끼울 때 (ex) 이름 : 연두부, 성별 : 남자, 출석 :2   =&amp;gt; 이름 :연놀부, 성별 : 여자, 출석 : 3
PATCH 는 정보를 정보 중 일부를 바꿀때&lt;/p&gt;

&lt;p&gt;REST API 를 보낼때 HTTP 규약에 따라 신호를 전송한다.&lt;/p&gt;</content><author><name>동센</name></author><summary type="html">REST API는 정보들이 주고받아지는 데 있어서 개발자들 사이에 널리 쓰이는 일종의 형식</summary></entry><entry><title type="html">[nodejs] Express 미들웨어</title><link href="http://localhost:4000/nodejs-express/" rel="alternate" type="text/html" title="[nodejs] Express 미들웨어" /><published>2020-05-07T00:00:00+09:00</published><updated>2020-05-07T00:00:00+09:00</updated><id>http://localhost:4000/nodejs-express</id><content type="html" xml:base="http://localhost:4000/nodejs-express/">&lt;p&gt;Express 의 중요 기능 2가지&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;라우터&lt;/li&gt;
  &lt;li&gt;미들웨어&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;소프트웨어를 만들때 처음부터 끝까지 다만드는 경우는 없다.
다른사람이 만든 소프트웨어를 부품으로 해서 만든다. 이것을 미들웨어라고 생각하면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install body-parser //로설치
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;body 는 웹브라우저에서 요청한 정보 본체를 뜻한다.&lt;/p&gt;

&lt;p&gt;parser 는 분석&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var bodyParser = require('body-parser'); //맨위에 선언

var post = request.body //로고쳐서 실행시켜준다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>동센</name></author><summary type="html">Express 의 중요 기능 2가지 라우터 미들웨어</summary></entry><entry><title type="html">[nodejs] 페이지 생성 구현2</title><link href="http://localhost:4000/nodejs-2/" rel="alternate" type="text/html" title="[nodejs] 페이지 생성 구현2" /><published>2020-05-07T00:00:00+09:00</published><updated>2020-05-07T00:00:00+09:00</updated><id>http://localhost:4000/nodejs-2</id><content type="html" xml:base="http://localhost:4000/nodejs-2/">&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.get('/create',function(request,response){ //get방식일떄

app.post('/create_process',function(request,response){ //post방식
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;쿼리 스트링이 아닌 방식으로 바꿀려면&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href=&quot;/update/?id=${sanitizedTitle}&quot;&amp;gt;update&amp;lt;/a&amp;gt;
에서
&amp;lt;a href=&quot;/update/${sanitizedTitle}&quot;&amp;gt;update&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;삭제기능&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;form action=&quot;/delete_process&quot; method=&quot;post&quot;&amp;gt; //action 에 delete 앞에 /를 주게되면 최상위 path 바로밑으로 감
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;express 는 리다이렉션 기능을 편리하게 제공하고 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;response.redirect //를 사용하면 된다
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>동센</name></author><summary type="html">``` app.get(‘/create’,function(request,response){ //get방식일떄</summary></entry><entry><title type="html">[AWS]Auto Scaling (오토스케일링)</title><link href="http://localhost:4000/aws/" rel="alternate" type="text/html" title="[AWS]Auto Scaling (오토스케일링)" /><published>2020-05-07T00:00:00+09:00</published><updated>2020-05-07T00:00:00+09:00</updated><id>http://localhost:4000/aws</id><content type="html" xml:base="http://localhost:4000/aws/">&lt;p&gt;컴퓨터가 필요하면 자동으로 생성하고 필요없으면 자동으로 삭제해준다.(과금이 발생하지 않게 해주는 기능)&lt;/p&gt;

&lt;p&gt;AUTO SCALING 목록에 보면
시작구성과, Auto Scaling group 이 있다.
먼저 Auto Scaling group에 먼저 생성을 해준다. 그러면&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;오토스케일의 이미지를 선택한다&lt;/li&gt;
  &lt;li&gt;이미지화 시켯던 내AMI를 선택한다.&lt;/li&gt;
  &lt;li&gt;인스턴스 성능 선택한다.&lt;/li&gt;
  &lt;li&gt;name 정하고 스토리지 정하고&lt;/li&gt;
  &lt;li&gt;시큐리티 그룹을 만든다.&lt;/li&gt;
  &lt;li&gt;그다음 오토스케일 그룹을 만드는 것이 나오는데&lt;/li&gt;
  &lt;li&gt;1번탭에 몇개의 인스턴스로 지정하는지 로드밸런싱 연결할건지 등등..&lt;/li&gt;
  &lt;li&gt;2번탭의(Confilgure scaling pollcles:조정 정책 구성)   첫번째 (이 그룹을 초기 크기로 유지) 가있는데 이건 1번탭에서 예를 들어 10개를 생성했다고 치고 그 10개중에서 4개의 인스턴스가 죽었다고 가정하면 그 죽은 인스턴스를 자동생성해준다.
두번째는 (조정 정책을 사용하여 이 그룹의 용량 조정)최대와 최소의 인스턴스를 설정해준다. 예를들어 각각의 input 박스에 1과 3을 입력하면 최대1개이상과 3개이하의 인스턴스를 생성한다.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>동센</name></author><summary type="html">컴퓨터가 필요하면 자동으로 생성하고 필요없으면 자동으로 삭제해준다.(과금이 발생하지 않게 해주는 기능)</summary></entry><entry><title type="html">[nodejs]express(Hello World!)</title><link href="http://localhost:4000/nodejs/" rel="alternate" type="text/html" title="[nodejs]express(Hello World!)" /><published>2020-05-07T00:00:00+09:00</published><updated>2020-05-07T00:00:00+09:00</updated><id>http://localhost:4000/nodejs</id><content type="html" xml:base="http://localhost:4000/nodejs/">&lt;p&gt;nodejs 에서 가장많이 사용하는 프레임웤&lt;/p&gt;

&lt;p&gt;npm install express –save 으로 설치&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var express = require('express') //express 모듈을 load 해온다 const 는 상수 바뀌지않음.
var app = express() //express 호출 (함수)

app.get('/' , (req, res) =&amp;gt; res.send('/'))//첫번째 인자는 경로, 두번째는 접속했을때 호출될 함수가 표현되어있음.(라우터라 생각하면됨)
//(라우팅라 생각하면됨(라우팅은 경로 즉 길을가고있는데 갈림길 이라 생각하면된다.))
app.get('/page', function(req, res){
  return res.send('/page');
}) //위에 app.get 이랑 똑같은 로직, 위에께 최신 밑에께 구버전

app.listen(3000, () =&amp;gt; console.log('Example app listening on port 3000!'))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>동센</name></author><summary type="html">nodejs 에서 가장많이 사용하는 프레임웤</summary></entry><entry><title type="html">[얄코]포인터</title><link href="http://localhost:4000/po/" rel="alternate" type="text/html" title="[얄코]포인터" /><published>2020-05-06T00:00:00+09:00</published><updated>2020-05-06T00:00:00+09:00</updated><id>http://localhost:4000/po</id><content type="html" xml:base="http://localhost:4000/po/">&lt;p&gt;철수와 영희가 있는데 철수가 팀프로젝트에서 필요한 교과서에 페이지를 알고있다 이거를 영희에게 알려줄려하는데 종이로 베껴서 보여주면 종이낭비닌깐
교과서의 페이지만 알려준다 이것이 포인터&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char language = 'c';
int thisYear = 2019;
double pi = 3.14;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이러한 변수에 입력된 값들은 메모리 어딘가에 저장 되어 있다.&lt;/p&gt;

&lt;p&gt;메모리는 어떠한 값들이 나란히 정렬되어 있지 않음. (배열을 사용할 떄는 예외)&lt;/p&gt;</content><author><name>동센</name></author><summary type="html">철수와 영희가 있는데 철수가 팀프로젝트에서 필요한 교과서에 페이지를 알고있다 이거를 영희에게 알려줄려하는데 종이로 베껴서 보여주면 종이낭비닌깐 교과서의 페이지만 알려준다 이것이 포인터 char language = 'c'; int thisYear = 2019; double pi = 3.14; 이러한 변수에 입력된 값들은 메모리 어딘가에 저장 되어 있다. 메모리는 어떠한 값들이 나란히 정렬되어 있지 않음. (배열을 사용할 떄는 예외)</summary></entry><entry><title type="html">[얄코]비동기 프로그래밍</title><link href="http://localhost:4000/dad/" rel="alternate" type="text/html" title="[얄코]비동기 프로그래밍" /><published>2020-05-06T00:00:00+09:00</published><updated>2020-05-06T00:00:00+09:00</updated><id>http://localhost:4000/dad</id><content type="html" xml:base="http://localhost:4000/dad/">&lt;p&gt;동기는 한줄인 열차라고 생각하면 된다. 앞에열차가 느리면 뒤에 열차도 덩달아 느리게 가게 된다.
비동기는  여러 선로의 열차에 앞차가 막히면 다른 선로로 배정해 나가는 방식이다.&lt;/p&gt;

&lt;p&gt;비동기 함수 call back 이라 생각하면 된다.&lt;/p&gt;

&lt;p&gt;만약 여러번에 걸쳐서 무엇을 찾을때 함수안에 함수.. 를 사용하게 된다.. 이런게 여러개 반복되면서 나타나는게
콜백 지옥이다.&lt;/p&gt;

&lt;p&gt;콜백 지옥을 해결하기위해 나온게 
Promise (체이닝 방식 .then 사용) 를 사용하게 되면 순차적으로 처리 가능
하지만 Promise 는 polyfill 등의 라이브러리 없이는 익스플로러에서는 동작하지 않으니 주의해야함!&lt;/p&gt;

&lt;p&gt;그리고
asyme await 도 비동기방식의 한 종류이며 동기 작업처럼 작성 할 수 있다.&lt;/p&gt;

&lt;p&gt;await를 붙여주면 이 함수가 끝나기 전에 다음 작업으로 넘어갈 수 없다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;학생_학번&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;학생_정보&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;학생정보_조회_Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;학생_학번&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//원래라면 그냥 바로 밑으로 흘러가는 비동기 처리가 되겠지만 await 를 써주면 동기처럼 사용가능&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;고교_DB_주소&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;고교_DB_주소_조회_Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;학생_정보&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;고교명&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>동센</name></author><summary type="html">동기는 한줄인 열차라고 생각하면 된다. 앞에열차가 느리면 뒤에 열차도 덩달아 느리게 가게 된다. 비동기는 여러 선로의 열차에 앞차가 막히면 다른 선로로 배정해 나가는 방식이다.</summary></entry><entry><title type="html">[nodejs] express 홈페이지 구현</title><link href="http://localhost:4000/nodejs-express/" rel="alternate" type="text/html" title="[nodejs] express 홈페이지 구현" /><published>2020-05-06T00:00:00+09:00</published><updated>2020-05-06T00:00:00+09:00</updated><id>http://localhost:4000/nodejs-express</id><content type="html" xml:base="http://localhost:4000/nodejs-express/">&lt;p&gt;기존 라우팅 방식은&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var app = http.createServer(function(request,response){}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;많은 부분에서 공유하고 사용했다.
어떻게 공유 되는 부분인지 확인할려면 위로올라서 확인해야하는데.&lt;/p&gt;

&lt;p&gt;express 방식의 라우팅 방식으로 하면 
request,response의 개발할려는 로직에  필요한 것만 들어있어서 간편하게 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;path 방식 url 파라미터 처리방법&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.get('/page/:pageId/:chapterId', function(request, response){
  return response.send(request.params);
  //{&quot;pageId&quot;:&quot;HTML&quot;,&quot;chapterId&quot;:&quot;css&quot;}
}) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>동센</name></author><summary type="html">기존 라우팅 방식은 var app = http.createServer(function(request,response){}</summary></entry><entry><title type="html">[nodejs] Escaping (탈출)</title><link href="http://localhost:4000/nodejs-escaping/" rel="alternate" type="text/html" title="[nodejs] Escaping (탈출)" /><published>2020-05-05T00:00:00+09:00</published><updated>2020-05-05T00:00:00+09:00</updated><id>http://localhost:4000/nodejs-escaping</id><content type="html" xml:base="http://localhost:4000/nodejs-escaping/">&lt;p&gt;저장된 정보가 밖에 나올때 필터링해서 안보이게? 해주는 것
(&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sanitizeHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;sanitize-html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>동센</name></author><summary type="html">저장된 정보가 밖에 나올때 필터링해서 안보이게? 해주는 것 (</summary></entry><entry><title type="html">[AWS]터미널로 서버접속, ELB 적용(ab 테스터)</title><link href="http://localhost:4000/aws/" rel="alternate" type="text/html" title="[AWS]터미널로 서버접속, ELB 적용(ab 테스터)" /><published>2020-04-29T00:00:00+09:00</published><updated>2020-04-29T00:00:00+09:00</updated><id>http://localhost:4000/aws</id><content type="html" xml:base="http://localhost:4000/aws/">&lt;ol&gt;
  &lt;li&gt;두개의 인스턴스를 생성해준다.&lt;/li&gt;
  &lt;li&gt;$ ssh -i 터미널경로/aws_passward.pem ubuntu@public ip주소&lt;/li&gt;
  &lt;li&gt;$ sudo apt-get update 타이핑(ab 벤치마킹 테스터기, 업데이트 먼저 해줘야함)패키지 리스트 를 업데이트를 해준다.&lt;/li&gt;
  &lt;li&gt;$ sudo apt-get install apache2-utils 타이핑(ab벤치마킹 설치), 웹서버 설치는 $ sudo apt-get install apache2&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ELB적용&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;웹서버를 이미지를 만들어준다.(AMI)&lt;/li&gt;
  &lt;li&gt;load balances 를 들어가 웹서버 2개를 save 해준다.&lt;/li&gt;
  &lt;li&gt;DNS name 주소를 복사하면 우리가만든 웹서버에 접속하게된다.&lt;/li&gt;
  &lt;li&gt;접속 로그 보는 방법 $sudo tail -f /var/log/apach2/access.log ( DNS name 에 접속을 하면 한번은 웹서버1 한번은 웹서버2 에 접속하는걸 눈으로 확인할 수 있다,)&lt;/li&gt;
&lt;/ol&gt;</content><author><name>동센</name></author><summary type="html">두개의 인스턴스를 생성해준다. $ ssh -i 터미널경로/aws_passward.pem ubuntu@public ip주소 $ sudo apt-get update 타이핑(ab 벤치마킹 테스터기, 업데이트 먼저 해줘야함)패키지 리스트 를 업데이트를 해준다. $ sudo apt-get install apache2-utils 타이핑(ab벤치마킹 설치), 웹서버 설치는 $ sudo apt-get install apache2</summary></entry></feed>