<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-06-10T15:22:23+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">juntae</title><subtitle>JavaScript And Node.js</subtitle><author><name>동센</name></author><entry><title type="html">[핸들러]</title><link href="http://localhost:4000/" rel="alternate" type="text/html" title="[핸들러]" /><published>2020-06-10T00:00:00+09:00</published><updated>2020-06-10T00:00:00+09:00</updated><id>http://localhost:4000/</id><content type="html" xml:base="http://localhost:4000/">&lt;p&gt;&lt;strong&gt;1. 핸들러(Handler) 란 무엇인가?&lt;/strong&gt;&lt;br /&gt;
  핸들러란 무엇이고 왜 필요한 것일까요?
앞서 배웠던 스레드(Thread) 는 사용자에게 보이지 않는 Background 에서 실행 되기 때문에 하나의 프로그램에서 여러가지 작업을 동시에 진행되도록 만들어 주는 유용한 개념이었는데요, 이런 스레드에게도 한계점은 있습니다. 바로 ‘View 자원들에 직접 접근이 불가’ 하다는 점입니다.&lt;/p&gt;

&lt;p&gt;분명 스레드는 하나의 프로그램에 정의된 자원을 공유할 수 있다고 했는데 버튼이나 텍스트뷰, 리스트뷰와 같은 뷰 들도 한 프로그램의 자원이라고 할 수 있음에도 왜 이들 뷰 자원에는 접근 할 수 없을까요? 왜 스레드가 뷰 자원에 직접 접근 할 수 없는지 텍스트 뷰를 예로 들어보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/62632095/84233775-f45f8480-ab2d-11ea-961d-01f68fe66ad0.png&quot; alt=&quot;21319135580E1D7B1B&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림과 같이 두개의 스레드(thread) 와 하나의 텍스트 뷰(Text view) 가 있습니다. 각각의 스레드 내부에서 텍스트 뷰를 직접 변화 시키는 코드를 작성한다고 가정해 보겠습니다. 그리고 두 개의 스레드가 동시에 하나의 텍스트 뷰를 변화 시키는 코드를 실행 시킨다면 어떻게 될까요? 텍스트 뷰에는 ‘a’ 가 찍히게 될까요, ‘b’ 가 찍히게 될까요?&lt;/p&gt;

&lt;p&gt;지금 저희가 고민하고 있듯이 컴퓨터도 마찬가지로 고민하고 있을겁니다. 이러한 문제 때문에 안드로이드에서는 스레드가 뷰 자원에 직접 접근을 할 수 없도록 막아두고 핸들러(Handler) 를 이용해 간접 접근 할 수 있도록 해두었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 핸들러의 원리&lt;/strong&gt;&lt;br /&gt;
  그렇다면 핸들러는 여러 스레드가 보내온 요청들을 어떻게 관리 할까요? 아무래도 여러 스레드로 부터 무질서하게 들어오는 요청들을 한번에 정리정돈 시켜주게되면 작업을 받는 텍스트 뷰 입장에서도 편할 수 있겠죠? 핸들러와 스레드 사이의 동작 메커니즘은 간단하게 표현 하자면 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/62632095/84233675-bc584180-ab2d-11ea-8828-0dc5608c4992.png&quot; alt=&quot;21372744580E231831&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우선 스레드는 텍스트를 변경해 달라는 요청을 메세지 형태로 만들어 핸들러에게 전달 하게 됩니다. 다음에 핸들러는 여러 스레드로부터 전달받은 메세지들을 ‘메세지 큐(Message Queue)’ 를 이용해 순차적으로 관리해 줍니다. 마지막으로. 이렇게 순서가 정렬 된 요청들을 순차적으로 처리 함으로써 스레드가 텍스트 뷰에 동시 접근 했을때 어떤 작업을 먼저 처리 해야 할지 컴퓨터가 판단 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 핸들러 구현 개념&lt;/strong&gt; &lt;br /&gt;
  앞서 설명 드렸듯이 핸들러는 여러 스레드로 부터 전달받은 요청들을 메세지를 이용해 간결하게 처리하게 됩니다. 이 메세지에 어떤 정보를 전달하고 이를 받아 사용하는 지를 구현하는 것이 핸들러 구현 원리라고 할 수 있습니다. 다시 말해, 핸들러 구현의 핵심은 어떤 스레드가 메세지를 전달하게 될 지(Sender), 반대로 어떤 스레드가 메세지를 받게 될지 (Receiver) 를 주의 깊게 관찰해 보아야 합니다. 다음 그림을 살펴 보시면 쉽게 이해 할 수있습니다.&lt;/p&gt;

&lt;p&gt;Sub Thread 들은 Text View 를 변화 시키도록 요청하는 Sender 의 역할을 하게 됩니다.  즉, 이 스레드들은 주로 메세지를 보내는 요소라 할 수 있습니다. 그리고 Main Thread 는 이러한 요청들을 받아 관리하고 적절한 동작을 수행하는 Receiver 의 역할을 하게 됩니다. 쭉 메세지를 받기만 하는 요소가 되는 것이지요.&lt;/p&gt;

&lt;p&gt;이처럼 메세지를 받아 적절한 동작을 수행 할 수 있는곳에 핸들러를 부착해 놓고, 여러 다른 스레드에서는 부착된 핸들러로 메세지를 보내도록 설정하기만 하면 됩니다.&lt;/p&gt;</content><author><name>동센</name></author><summary type="html">1. 핸들러(Handler) 란 무엇인가? 핸들러란 무엇이고 왜 필요한 것일까요? 앞서 배웠던 스레드(Thread) 는 사용자에게 보이지 않는 Background 에서 실행 되기 때문에 하나의 프로그램에서 여러가지 작업을 동시에 진행되도록 만들어 주는 유용한 개념이었는데요, 이런 스레드에게도 한계점은 있습니다. 바로 ‘View 자원들에 직접 접근이 불가’ 하다는 점입니다.</summary></entry><entry><title type="html">[nodejs] 쿠키 실습</title><link href="http://localhost:4000/nodejs/" rel="alternate" type="text/html" title="[nodejs] 쿠키 실습" /><published>2020-05-20T00:00:00+09:00</published><updated>2020-05-20T00:00:00+09:00</updated><id>http://localhost:4000/nodejs</id><content type="html" xml:base="http://localhost:4000/nodejs/">&lt;p&gt;로그인 상태체크&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authIsOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//쿠키 체크 &lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isOwner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//기본으로 false&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//쿠키 값 유무 체크&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cookies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;egoing777@gmail.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;11111&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;isOwner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   




&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isOwner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authIsOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;로그인 상태를 UI에 반영&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;template.js
module.exports = {
  HTML:function(title, list, body, control, authStatusUI = '&amp;lt;a href=&quot;/login&quot;&amp;gt;login&amp;lt;/a&amp;gt;'){//authStatusUI에 값이 없으면 &amp;lt;a href=&quot;/login&quot;&amp;gt;login&amp;lt;/a&amp;gt; 이게 들어간다.
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;접근금직(접근권한)
로그인된 사용자만 insert, create, delete 되도록&lt;/p&gt;

&lt;p&gt;else if(pathname === ‘/create_process’){
      if(authIsOwner(request,response) === false){
        response.end(‘Login required!!’);&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    return false;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>동센</name></author><summary type="html">로그인 상태체크 ```javascript function authIsOwner(request,response){ //쿠키 체크 var isOwner = false;//기본으로 false if(request.headers.cookie){//쿠키 값 유무 체크 cookies = cookie.parse(request.headers.cookie); } if(cookies.email === ‘egoing777@gmail.com’ &amp;amp;&amp;amp; cookies.password === ‘11111’){ isOwner = true; } console.log(cookies) return isOwner; }</summary></entry><entry><title type="html">[nodejs]쿠키</title><link href="http://localhost:4000/nodejs/" rel="alternate" type="text/html" title="[nodejs]쿠키" /><published>2020-05-19T00:00:00+09:00</published><updated>2020-05-19T00:00:00+09:00</updated><id>http://localhost:4000/nodejs</id><content type="html" xml:base="http://localhost:4000/nodejs/">&lt;p&gt;웹브라우저가 서로 주고받는 데이터
http 프로토콜에 포함되어있는 기술&lt;/p&gt;

&lt;p&gt;쿠키생성하는방법&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// response.writeHead(200, { //성공했다는 가정하에 2번쨰는 객체를 넣어준다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//     'Set-Cookie':['yummy_cookie=choco', 'tasty_cookie=strawberry'] //두개의 쿠키가 생성됨.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// })&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Cookie!!!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;쿠키를 서버에 요청하는 법
먼저 npm 을 다운로드한다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -s cookie
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그다음&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var cookie = require('cookie');
var cookies = {};
    if(request.headers.cookie !== undefined){
        cookies = cookie.parse(request.headers.cookie); //쿠키를 전달해 주는 객체
        //parse 는 값이 없는걸 자동으로 변환을 못해준다.
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;만약, 크롬으로 홈페이지를 들어가서 외국어 페이지를 로드 하면 (항상 한국어로 보여드릴까요?) 라고하는 문구가 나온다 한국어로 클릭하면 쿠키에서 ex) us =&amp;gt; ko 로 변경이된다.

6. Session cookies VS Permanent cookies
쿠키를언제까지 살아있게 할 것인가?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Session cookies 는 홈페이지를 껏다 키면 cookies 가 다 날라가지만 Permanent cookies 는 껏다 켜도 살아있다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Set-Cookie&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Permanent = cookies; Max-Age=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//30일 (60초)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;를 추가해준다음에 홈페이지를 껏다 키면 permanent 만 살아있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Secure &amp;amp; HttpOnly&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;보안과 관련됨
Secure : https 로 접속 할 때만 쿠키를 전송한다.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Set-Cookie&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Secure = Secure; Secure&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//끝에붙인 Secure가 중요]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;HttpOnly: 는 웹브라우저와 웹서버가 통신할때만 쿠키를 생성&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Set-Cookie&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;HttpOnly=HttpOnly; httpOnly&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;HttpOnly 는 세션을 통해 장난치는 사람들이 많아서? 해킹할려는사람들이 많아서 쓴다.&lt;/p&gt;

&lt;p&gt;8.path &amp;amp; domain
path : 특정디렉토리 안에서만 쿠키를 활성화 하고싶을때 사용하는 기능&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Set-Cookie&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Path=Path; Path=/cookie&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 어느 path 에서 동작하게 할것인가 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;domain : 어떤 도메인에서만 동작할 것인가.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Set-Cookie&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Domain=Domain; Domain=o2.org&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//쿠키에 domain을 보면 전부다 domain만 .o2.org로 되어있고 나머지는 o2.org 로 되어있다. ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>동센</name></author><summary type="html">웹브라우저가 서로 주고받는 데이터 http 프로토콜에 포함되어있는 기술</summary></entry><entry><title type="html">[nodejs]보안</title><link href="http://localhost:4000/nodejs/" rel="alternate" type="text/html" title="[nodejs]보안" /><published>2020-05-18T00:00:00+09:00</published><updated>2020-05-18T00:00:00+09:00</updated><id>http://localhost:4000/nodejs</id><content type="html" xml:base="http://localhost:4000/nodejs/">&lt;ol&gt;
  &lt;li&gt;express 를 항상 최신버전으로 유지.&lt;/li&gt;
  &lt;li&gt;https 를 써라 why? 웹브라우저와 웹서버가 통신할때 암호화를 하기떄문에.&lt;/li&gt;
  &lt;li&gt;단골손님같은 보안이슈를 자동으로 해결해준다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -save helmet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;쿠키를 올바르게 사용해라(누가들어왓는지 확인하는용도?)&lt;/li&gt;
  &lt;li&gt;웹애플리케이션이 쓰고있는 모듈들을 잘 관리해라
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i nsp -g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>동센</name></author><summary type="html">express 를 항상 최신버전으로 유지. https 를 써라 why? 웹브라우저와 웹서버가 통신할때 암호화를 하기떄문에. 단골손님같은 보안이슈를 자동으로 해결해준다. npm install -save helmet 쿠키를 올바르게 사용해라(누가들어왓는지 확인하는용도?) 웹애플리케이션이 쓰고있는 모듈들을 잘 관리해라 npm i nsp -g</summary></entry><entry><title type="html">[nodejs]express generator</title><link href="http://localhost:4000/nodejsexpress-generator/" rel="alternate" type="text/html" title="[nodejs]express generator" /><published>2020-05-18T00:00:00+09:00</published><updated>2020-05-18T00:00:00+09:00</updated><id>http://localhost:4000/nodejsexpress-generator</id><content type="html" xml:base="http://localhost:4000/nodejsexpress-generator/">&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install express-generator -g //다른파일에 설치를 한다 -g 는 글로벌 전역으로 쓸수 있는 것이다

express myapp //그다음 타이핑하면 폴더가 만들어지면서 설치가 된다.

npm start //그다음 타이핑 하게 되면 package.json에 start는 실행하게된다. 그다음 local3000으로 들어가면 심플한 페이지가 하나 생성되어있다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>동센</name></author><summary type="html">``` npm install express-generator -g //다른파일에 설치를 한다 -g 는 글로벌 전역으로 쓸수 있는 것이다</summary></entry><entry><title type="html">[nodejs]에러처리</title><link href="http://localhost:4000/nodejs2/" rel="alternate" type="text/html" title="[nodejs]에러처리" /><published>2020-05-15T00:00:00+09:00</published><updated>2020-05-15T00:00:00+09:00</updated><id>http://localhost:4000/nodejs2</id><content type="html" xml:base="http://localhost:4000/nodejs2/">&lt;p&gt;존재하지 않는 페이지를 찾았을때 404 에러가 나타나는데.
express 기준&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.use(function(req, res, next){
  res.status(404).send('Sorry cant find that!');
}) //추가해준다
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;페이지에 에러가 있을 경우(서버에러 500)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; next(err); //다음 미들웨어를 호출하는 것 에러를 던진다 생각하면 된다.
 
 
 app.use(function(err, req, res, next){ //첫번째는 next에 담긴 err가 넘어오고
  res.status(500).send('Something broke!');
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>동센</name></author><summary type="html">존재하지 않는 페이지를 찾았을때 404 에러가 나타나는데. express 기준</summary></entry><entry><title type="html">[nodejs]정적파일 서비스</title><link href="http://localhost:4000/nodejs/" rel="alternate" type="text/html" title="[nodejs]정적파일 서비스" /><published>2020-05-15T00:00:00+09:00</published><updated>2020-05-15T00:00:00+09:00</updated><id>http://localhost:4000/nodejs</id><content type="html" xml:base="http://localhost:4000/nodejs/">&lt;p&gt;images 디렉토리 만들어주고&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.use(express.static('public'));//public 디렉토리 안에서 static 파일을 찾겠다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그다음 본문 로직에&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;img src=&quot;/images/hello.jpg&quot; style=&quot;width:300px; display:block; margin-top:10px;&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>동센</name></author><summary type="html">images 디렉토리 만들어주고 app.use(express.static('public'));//public 디렉토리 안에서 static 파일을 찾겠다.</summary></entry><entry><title type="html">[nodejs]라우터-주소체계변경</title><link href="http://localhost:4000/nodejs3/" rel="alternate" type="text/html" title="[nodejs]라우터-주소체계변경" /><published>2020-05-15T00:00:00+09:00</published><updated>2020-05-15T00:00:00+09:00</updated><id>http://localhost:4000/nodejs3</id><content type="html" xml:base="http://localhost:4000/nodejs3/">&lt;pre&gt;&lt;code class=&quot;language-javacript&quot;&gt;app.use('/topic',topicRouter)   //topic 라우터를 타면 topicRouter 라는 미들웨어를 적용시키겠다.


router.get('/create',function(request,response){
var title = 'WEB - create';
        var list = template.list(request.list);//미들웨어 
        var html = template.HTML(title, list, `
          &amp;lt;form action=&quot;/topic/create_process&quot; method=&quot;post&quot;&amp;gt;
            &amp;lt;p&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;title&quot; placeholder=&quot;title&quot;&amp;gt;&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;
              &amp;lt;textarea name=&quot;description&quot; placeholder=&quot;description&quot;&amp;gt;&amp;lt;/textarea&amp;gt;
            &amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;
              &amp;lt;input type=&quot;submit&quot;&amp;gt;
            &amp;lt;/p&amp;gt;
          &amp;lt;/form&amp;gt;
        `, '');
        response.send(html);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;routers 에 위치한 topic.js 를 만든뒤 path 하는 메소드 들을 전부다 이주 시켜주었다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;기본 모듈은 이렇게 써준다.&lt;/p&gt;</content><author><name>동센</name></author><summary type="html">```javacript app.use(‘/topic’,topicRouter) //topic 라우터를 타면 topicRouter 라는 미들웨어를 적용시키겠다.</summary></entry><entry><title type="html">[AWS]S3 (Simple Storage Service)</title><link href="http://localhost:4000/awss3-simple-storage-service/" rel="alternate" type="text/html" title="[AWS]S3 (Simple Storage Service)" /><published>2020-05-14T00:00:00+09:00</published><updated>2020-05-14T00:00:00+09:00</updated><id>http://localhost:4000/awss3-simple-storage-service</id><content type="html" xml:base="http://localhost:4000/awss3-simple-storage-service/">&lt;p&gt;파일을 저장하는 서비스 라고 생각하면 된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;s3 클릭한뒤 버킷을 생성한다.&lt;/li&gt;
  &lt;li&gt;버킷생성 뒤 파일을 업로드 해본다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ex) 를 들어 웹사이트를 운영한다.그러면 그 사이트에서 사용자가 파일을 업로드하면 미들웨어(루비, 파이썬, 자바 등등)가 s3 의 api 를 통해 s3로 전송한다.&lt;/p&gt;</content><author><name>동센</name></author><summary type="html">파일을 저장하는 서비스 라고 생각하면 된다.</summary></entry><entry><title type="html">[얄코] GraphQL</title><link href="http://localhost:4000/graphql/" rel="alternate" type="text/html" title="[얄코] GraphQL" /><published>2020-05-13T00:00:00+09:00</published><updated>2020-05-13T00:00:00+09:00</updated><id>http://localhost:4000/graphql</id><content type="html" xml:base="http://localhost:4000/graphql/">&lt;p&gt;기존 REST API는&lt;/p&gt;

&lt;p&gt;메소드와 URL을 조합해서, 예측 가능하고 일정한 정보와 작업을 요청하는 것이다. 버튼마다 나오는 것이 확실한 자판기 처럼 하지만 불편할 때가 있다.&lt;/p&gt;

&lt;p&gt;ex) 국어강사가 학생들의 국어 성적을 보고자 하는데 요청을 보낼때 학번, 이름, 국어 성적이면 충분하다.
			(도메인)/classes/(반idx)/students 이렇게 요청을 보내면 쓸때없는 정보들도 다같이 들고온다. (주소, 키, 성별,등등) 즉, 데이터 소모가 심하다.
			결국 두번을 요청해야지 필요한 정보만 갖고올 수 있다.&lt;/p&gt;

&lt;p&gt;GraphQL 은 body에 들어간 데이터로 유도리 있게 요청이 가능하다. 즉 여러댑스를 한 정보에 다 받아올 수 있는 것.
ex) (도메인)/graphql post 에 body에 담에서 보내면 된다.
insert 는&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;서버에 지정된 함수 이름을 적고.&lt;/li&gt;
  &lt;li&gt;거기에 정보들을 넣어 보내면 된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;update delete 도 마찬가지&lt;/p&gt;</content><author><name>동센</name></author><summary type="html">기존 REST API는</summary></entry></feed>