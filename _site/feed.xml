<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-05-06T10:07:14+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">juntae</title><subtitle>JavaScript And Node.js</subtitle><author><name>동센</name></author><entry><title type="html">[얄코]포인터</title><link href="http://localhost:4000/po/" rel="alternate" type="text/html" title="[얄코]포인터" /><published>2020-05-06T00:00:00+09:00</published><updated>2020-05-06T00:00:00+09:00</updated><id>http://localhost:4000/po</id><content type="html" xml:base="http://localhost:4000/po/">&lt;p&gt;철수와 영희가 있는데 철수가 팀프로젝트에서 필요한 교과서에 페이지를 알고있다 이거를 영희에게 알려줄려하는데 종이로 베껴서 보여주면 종이낭비닌깐
교과서의 페이지만 알려준다 이것이 포인터&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char language = 'c';
int thisYear = 2019;
double pi = 3.14;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이러한 변수에 입력된 값들은 메모리 어딘가에 저장 되어 있다.&lt;/p&gt;

&lt;p&gt;메모리는 어떠한 값들이 나란히 정렬되어 있지 않음. (배열을 사용할 떄는 예외)&lt;/p&gt;</content><author><name>동센</name></author><summary type="html">철수와 영희가 있는데 철수가 팀프로젝트에서 필요한 교과서에 페이지를 알고있다 이거를 영희에게 알려줄려하는데 종이로 베껴서 보여주면 종이낭비닌깐 교과서의 페이지만 알려준다 이것이 포인터 char language = 'c'; int thisYear = 2019; double pi = 3.14; 이러한 변수에 입력된 값들은 메모리 어딘가에 저장 되어 있다. 메모리는 어떠한 값들이 나란히 정렬되어 있지 않음. (배열을 사용할 떄는 예외)</summary></entry><entry><title type="html">[얄코]비동기 프로그래밍</title><link href="http://localhost:4000/dad/" rel="alternate" type="text/html" title="[얄코]비동기 프로그래밍" /><published>2020-05-06T00:00:00+09:00</published><updated>2020-05-06T00:00:00+09:00</updated><id>http://localhost:4000/dad</id><content type="html" xml:base="http://localhost:4000/dad/">&lt;p&gt;동기는 한줄인 열차라고 생각하면 된다. 앞에열차가 느리면 뒤에 열차도 덩달아 느리게 가게 된다.
비동기는  여러 선로의 열차에 앞차가 막히면 다른 선로로 배정해 나가는 방식이다.&lt;/p&gt;

&lt;p&gt;비동기 함수 call back 이라 생각하면 된다.&lt;/p&gt;

&lt;p&gt;만약 여러번에 걸쳐서 무엇을 찾을때 함수안에 함수.. 를 사용하게 된다.. 이런게 여러개 반복되면서 나타나는게
콜백 지옥이다.&lt;/p&gt;

&lt;p&gt;콜백 지옥을 해결하기위해 나온게 
Promise (체이닝 방식 .then 사용) 를 사용하게 되면 순차적으로 처리 가능
하지만 Promise 는 polyfill 등의 라이브러리 없이는 익스플로러에서는 동작하지 않으니 주의해야함!&lt;/p&gt;

&lt;p&gt;그리고
asyme await 도 비동기방식의 한 종류이며 동기 작업처럼 작성 할 수 있다.&lt;/p&gt;

&lt;p&gt;await를 붙여주면 이 함수가 끝나기 전에 다음 작업으로 넘어갈 수 없다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;학생_학번&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;학생_정보&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;학생정보_조회_Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;학생_학번&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//원래라면 그냥 바로 밑으로 흘러가는 비동기 처리가 되겠지만 await 를 써주면 동기처럼 사용가능&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;고교_DB_주소&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;고교_DB_주소_조회_Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;학생_정보&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;고교명&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>동센</name></author><summary type="html">동기는 한줄인 열차라고 생각하면 된다. 앞에열차가 느리면 뒤에 열차도 덩달아 느리게 가게 된다. 비동기는 여러 선로의 열차에 앞차가 막히면 다른 선로로 배정해 나가는 방식이다.</summary></entry><entry><title type="html">[nodejs] Escaping (탈출)</title><link href="http://localhost:4000/nodejs-escaping/" rel="alternate" type="text/html" title="[nodejs] Escaping (탈출)" /><published>2020-05-05T00:00:00+09:00</published><updated>2020-05-05T00:00:00+09:00</updated><id>http://localhost:4000/nodejs-escaping</id><content type="html" xml:base="http://localhost:4000/nodejs-escaping/">&lt;p&gt;저장된 정보가 밖에 나올때 필터링해서 안보이게? 해주는 것
(&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sanitizeHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;sanitize-html&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>동센</name></author><summary type="html">저장된 정보가 밖에 나올때 필터링해서 안보이게? 해주는 것 (</summary></entry><entry><title type="html">[AWS]터미널로 서버접속, ELB 적용(ab 테스터)</title><link href="http://localhost:4000/aws/" rel="alternate" type="text/html" title="[AWS]터미널로 서버접속, ELB 적용(ab 테스터)" /><published>2020-04-29T00:00:00+09:00</published><updated>2020-04-29T00:00:00+09:00</updated><id>http://localhost:4000/aws</id><content type="html" xml:base="http://localhost:4000/aws/">&lt;ol&gt;
  &lt;li&gt;두개의 인스턴스를 생성해준다.&lt;/li&gt;
  &lt;li&gt;$ ssh -i 터미널경로/aws_passward.pem ubuntu@public ip주소&lt;/li&gt;
  &lt;li&gt;$ sudo apt-get update 타이핑(ab 벤치마킹 테스터기, 업데이트 먼저 해줘야함)패키지 리스트 를 업데이트를 해준다.&lt;/li&gt;
  &lt;li&gt;$ sudo apt-get install apache2-utils 타이핑(ab벤치마킹 설치), 웹서버 설치는 $ sudo apt-get install apache2&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ELB적용&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;웹서버를 이미지를 만들어준다.(AMI)&lt;/li&gt;
  &lt;li&gt;load balances 를 들어가 웹서버 2개를 save 해준다.&lt;/li&gt;
  &lt;li&gt;DNS name 주소를 복사하면 우리가만든 웹서버에 접속하게된다.&lt;/li&gt;
  &lt;li&gt;접속 로그 보는 방법 $sudo tail -f /var/log/apach2/access.log ( DNS name 에 접속을 하면 한번은 웹서버1 한번은 웹서버2 에 접속하는걸 눈으로 확인할 수 있다,)&lt;/li&gt;
&lt;/ol&gt;</content><author><name>동센</name></author><summary type="html">두개의 인스턴스를 생성해준다. $ ssh -i 터미널경로/aws_passward.pem ubuntu@public ip주소 $ sudo apt-get update 타이핑(ab 벤치마킹 테스터기, 업데이트 먼저 해줘야함)패키지 리스트 를 업데이트를 해준다. $ sudo apt-get install apache2-utils 타이핑(ab벤치마킹 설치), 웹서버 설치는 $ sudo apt-get install apache2</summary></entry><entry><title type="html">[얄코] Angular, React, Vue</title><link href="http://localhost:4000/angular-react-vue/" rel="alternate" type="text/html" title="[얄코] Angular, React, Vue" /><published>2020-04-24T00:00:00+09:00</published><updated>2020-04-24T00:00:00+09:00</updated><id>http://localhost:4000/angular-react-vue</id><content type="html" xml:base="http://localhost:4000/angular-react-vue/">&lt;p&gt;SPA 프레임워크&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;“재료는 우리가 주는데 요리는 너네가 알아서해” 라고 역할을 맡겨버리는 것.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;옛날 에는 페이지에 좋아요 버튼을 누르면 화면이 다시 리로드가 되었는데 지금은 리로드없이 가능하다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;브라우저는 javascript, css html이 진열된 묶음을 받아간다음 이 레시피대로 데이터를 요청하고, 화면을 렌더링해서 모니터에 띄워주게 되는 것&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Evan You란 개인이 만든 Vue는 코드가 깔끔하고 배우기 쉽다는 특성떄문에 후발주자임에도 빠르게 성장하고있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;React는 페이북에서 만들었는데 막강한 커뮤니티와 자료들을 갖추고 있다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Angular 는 구글에서만들었는데 Javascript 를 보완한 언어, TypeScript라고 부르며 매우 안정적이고 탄탄한 프론트엔드 앱을 만들 수 있다. 하지만 무겁고 배우기어렵다.&lt;br /&gt;&lt;/p&gt;</content><author><name>동센</name></author><summary type="html">SPA 프레임워크</summary></entry><entry><title type="html">[AWS] ELB(Elastic Load Balancing)</title><link href="http://localhost:4000/aws-elbelastic-load-balancing/" rel="alternate" type="text/html" title="[AWS] ELB(Elastic Load Balancing)" /><published>2020-04-24T00:00:00+09:00</published><updated>2020-04-24T00:00:00+09:00</updated><id>http://localhost:4000/aws-elbelastic-load-balancing</id><content type="html" xml:base="http://localhost:4000/aws-elbelastic-load-balancing/">&lt;p&gt;로드밸런서 생성을 하는데,&lt;/p&gt;

&lt;p&gt;만약 우리의 서비스가 HTTPS 도 지원한다면 리스너 추가를 해서 HTTPS 를 추가하는데 인스턴스는 HTTPS 로 할필요없이 HTTP 로만 해줘도된다.&lt;/p&gt;

&lt;p&gt;왜냐하면 로브밸런서와 EC2 사이에 로드밸런서가 안전하게 통신할 수 있기 때문에&lt;/p&gt;

&lt;p&gt;DNS name 이 만들어지는데 DNS name 으로 접속이 가능하다.&lt;/p&gt;</content><author><name>동센</name></author><summary type="html">로드밸런서 생성을 하는데,</summary></entry><entry><title type="html">[얄코]객체지향 프로그래밍</title><link href="http://localhost:4000/fe/" rel="alternate" type="text/html" title="[얄코]객체지향 프로그래밍" /><published>2020-04-23T00:00:00+09:00</published><updated>2020-04-23T00:00:00+09:00</updated><id>http://localhost:4000/fe</id><content type="html" xml:base="http://localhost:4000/fe/">&lt;p&gt;&lt;strong&gt;객체지향&lt;/strong&gt;이랑 어떤 프로그래밍 방식, 방법론이다. ( 객체지향 언어는 복잡한 코드를 간결하게? 해주는 것이라 생각하면 됨.)&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;데이터와 기능이 클래스로 ‘캡슐화’ 된 컴퓨터 자원의 묶음을 ‘객체’라고 한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;밀가루 반죽과 팥이 클래스란 붕어빵이 틀에 찍혀서 객체라는 붕어빵이 나온다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‘은닉성’&lt;/strong&gt;  :  우리가 TV 속을 뜯어보지 않아도 리모콘으로 필요한 조작을 다 할 수 있는 것처럼 내부구조는 private 로 감춰놓고,  외부에서 조작할 수 있는 명령어만 public으로 공개해놓는다. 이로서 바깥의 간섭으로 발생하는 오류를 방지할 수 있고 남이 만든 클래스의 객체들도 일일이 뜯어볼 필요 없이 제공되는 기능들을 그대로 사용할 수 있는것&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‘다형성’&lt;/strong&gt; : 중국집에서 ‘탕수육주세요’ 하면 일반 탕수육이  나오지만 이를 상속한 사천식 중국집에서는 ‘탕수육 주세요’ 가 override 돼서 시뻘건 탕수육이 나오는 것.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;상속&lt;/strong&gt;은 트리구조의 상하관계가 뚜렷하기 떄문에 한 자식이 두 부모로부터 상속받는게 언어마다 불가능하거나, 부작용들이 있다. 반면 인터페이스는 이로부터 자유롭다.&lt;br /&gt;
박쥐와 날다람쥐는 포유류란 부모에게서, 날치는 어류란 부모에게서 상속받지만 ‘난다’라는 기능을 인터페이스로 장착해서 대다수 조류와 곤충처럼 ‘날짐승’이란 카테고리에 들어갈 수 있는 것.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;상속은 물려받는것, 인터페이스는 장착하는 것 이라생각하면 된다.&lt;br /&gt;&lt;/p&gt;</content><author><name>동센</name></author><summary type="html">객체지향이랑 어떤 프로그래밍 방식, 방법론이다. ( 객체지향 언어는 복잡한 코드를 간결하게? 해주는 것이라 생각하면 됨.)</summary></entry><entry><title type="html">[얄코]Cookie, Session, Cache</title><link href="http://localhost:4000/cookie-session-cache/" rel="alternate" type="text/html" title="[얄코]Cookie, Session, Cache" /><published>2020-04-21T00:00:00+09:00</published><updated>2020-04-21T00:00:00+09:00</updated><id>http://localhost:4000/cookie-session-cache</id><content type="html" xml:base="http://localhost:4000/cookie-session-cache/">&lt;h1 id=&quot;쿠키-&quot;&gt;쿠키 :&lt;/h1&gt;
&lt;p&gt;브라우저에 저장되는 내용들  , 내컴퓨터에 있으닌깐 내가 갖고 있는 정보들 하지만 쿠키는 한계가 있다 내가임의로 고치거나 고칠 수 있고 남이 쉽게 볼 수 도있다.&lt;br /&gt;
( 로그인자동완성, 오늘 하루 안보기, 쇼핑을 하는데 로그인을 하지않고 물건을 장바구니에 담는 등 지워지거나, 조작되거나, 가로채거나 보여져도 큰 지장이없는 정보들을 브라우져에 저장하는데 사용됨)&lt;/p&gt;
&lt;h1 id=&quot;세션-&quot;&gt;세션 :&lt;/h1&gt;
&lt;p&gt;서버에서 사용자를 구분하기위한 기한이 짧은 임시 키 하나를 부라우저에 보내서 쿠키로 저장한다.&lt;br /&gt;
사용자가 어떤 사이트에 돌아다닐 때 이 사용자의 중요한 정보들은 서버의 메모리나 데이터베이스에 저장되는 것.&lt;br /&gt;
브라우저가 이 사이트의 페이지들에 접속할 때마다. http 요청에 이 키를 실어서 전송하고 서버는 그 키를 보고 ‘얘는 그 사용자구나’ 인식해서 이 사용자의 정보들을 가공해서 응답으로 보내준다.&lt;br /&gt;
ex) 네이버에 로그인 해서 다른페이지 를 이용할때마다 로그인을 안해도 되는 이유는 쿠키와 세션 조합으로 네이버서 네이버 서버가 인지하고 있다.&lt;br /&gt;
사용자나 다른 누군가에게 노출되어서는 안 되는, 서비스 제공자가 직접 관리해야 할 정보들은 세션으로 서버 안에서 다뤄짐&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;캐쉬-&quot;&gt;캐쉬 :&lt;/h1&gt;
&lt;p&gt;가져오는데 비용이 드는 데이터를 한 번 가져온 뒤에는 임시로 저장해두는것, 캐쉬는 이미지 같을걸 불러올때 데이터 사용량도 발생하고 시간도 들기 때문에 사용자가 여러 번 방문할 법한 사이트에서는 사용자의 컴퓨터 또는 중간 역할을 하는 서버에 저장해둔다.&lt;br /&gt;
ex) 손님이 신발을 사는데 손님이 사이즈를 갖다달라고 직원에게 요청한다. 직원은 창고에 손님 사이즈 신발을 가져온다. 손님은 매장을 한번 더 둘러보고 온다고 하지만 직원은 그 손님이 다시와서 살것같아서 창고에 넣어두지 않고 한편의 거치대에 넣어논다. (거치대 = 캐쉬)&lt;/p&gt;</content><author><name>동센</name></author><summary type="html">쿠키 : 브라우저에 저장되는 내용들 , 내컴퓨터에 있으닌깐 내가 갖고 있는 정보들 하지만 쿠키는 한계가 있다 내가임의로 고치거나 고칠 수 있고 남이 쉽게 볼 수 도있다. ( 로그인자동완성, 오늘 하루 안보기, 쇼핑을 하는데 로그인을 하지않고 물건을 장바구니에 담는 등 지워지거나, 조작되거나, 가로채거나 보여져도 큰 지장이없는 정보들을 브라우져에 저장하는데 사용됨) 세션 : 서버에서 사용자를 구분하기위한 기한이 짧은 임시 키 하나를 부라우저에 보내서 쿠키로 저장한다. 사용자가 어떤 사이트에 돌아다닐 때 이 사용자의 중요한 정보들은 서버의 메모리나 데이터베이스에 저장되는 것. 브라우저가 이 사이트의 페이지들에 접속할 때마다. http 요청에 이 키를 실어서 전송하고 서버는 그 키를 보고 ‘얘는 그 사용자구나’ 인식해서 이 사용자의 정보들을 가공해서 응답으로 보내준다. ex) 네이버에 로그인 해서 다른페이지 를 이용할때마다 로그인을 안해도 되는 이유는 쿠키와 세션 조합으로 네이버서 네이버 서버가 인지하고 있다. 사용자나 다른 누군가에게 노출되어서는 안 되는, 서비스 제공자가 직접 관리해야 할 정보들은 세션으로 서버 안에서 다뤄짐</summary></entry><entry><title type="html">[AWS] Scale Out</title><link href="http://localhost:4000/aws-scale-out/" rel="alternate" type="text/html" title="[AWS] Scale Out" /><published>2020-04-21T00:00:00+09:00</published><updated>2020-04-21T00:00:00+09:00</updated><id>http://localhost:4000/aws-scale-out</id><content type="html" xml:base="http://localhost:4000/aws-scale-out/">&lt;h1 id=&quot;여러대의-컴퓨터가-협력해서-어떤-동일한-목표를-달성하는-컴퓨터들의-사회를-만든다-라고-할-수-있다&quot;&gt;여러대의 컴퓨터가 협력해서 어떤 동일한 목표를 달성하는 컴퓨터들의 사회를 만든다 라고 할 수 있다.&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;처음에 Scale up 을 하다보면 단일 컴퓨팅으로써 한계에 도달하게 되는데 그 한계에 도달했을때 한계를 뛰어넘을 수 있는건 Scale out&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;데이터를 처리할떄 보통 web server - middle ware - database 순이다. &lt;br /&gt;
web server 대표적 으로 nginx, apache&lt;br /&gt;
middle ware 대표적 으로  php , java spring&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;만약,트래픽 이 몰린다면 CPU가 과부화가 걸려서 접속이 느려질 것이다. &lt;br /&gt;
그럴때 scale up을 사용해 database 를 한대더 인스턴스를 생성해준다. database.slave1(읽기), database.master1(쓰기) 로 정해놓는다.&lt;br /&gt;
예를들어 middle ware에서 database.slave1 에는 읽기만 database.master1 에는 쓰기만 역할을 지정해주고 더많을떄는 3개4개까지 만들어준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;보통 database.slave을 먼저 샤딩해주고 그다음 database.master 을 샤딩해준다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그다음 middle ware 를 하나더 만들어주고 web server 를 만들어주는데 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;webserve 는 중요한게 사용자가 접속할때 ip에서 DNS서버를 통해 접속하는데  DNS에 설정을 변경해 
2명의 사용자가 접속할때 webserver1,webserver2 로 분할로 보내주는 개념이다.
보통 webserver 같은경우 앞에 loadbalancer 를 두고 사용을한다. &lt;br /&gt;
예를 들어 webserver1, webserver2, webserver3  총3대가 있으면  webserver2가 죽었으면 loadbalancer 가 감지해 webserver1,webserver3 으로만 타게 해준다.&lt;br /&gt;
그리고 webserver1이  webserver2,webserver3 에 비해 성능이 좋으면 loadbalancer 가 감지해 webserver1 에 많은 할당량을 배분한다.&lt;br /&gt;&lt;/p&gt;</content><author><name>동센</name></author><summary type="html">여러대의 컴퓨터가 협력해서 어떤 동일한 목표를 달성하는 컴퓨터들의 사회를 만든다 라고 할 수 있다.</summary></entry><entry><title type="html">[nodejs] web server, 변수, Template literals,URL</title><link href="http://localhost:4000/nodejs-web-server/" rel="alternate" type="text/html" title="[nodejs] web server, 변수, Template literals,URL" /><published>2020-04-20T00:00:00+09:00</published><updated>2020-04-20T00:00:00+09:00</updated><id>http://localhost:4000/nodejs-web-server</id><content type="html" xml:base="http://localhost:4000/nodejs-web-server/">&lt;p&gt;web browser 가 web server 한테 정보를 요청하면 web server 그정보를 찾아서 web browser에게 응답해준다.&lt;/p&gt;

&lt;h1 id=&quot;datatype&quot;&gt;&lt;strong&gt;DataType&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;String&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;asdjlkasdvnlkfnvljkfndjlvndfljvnjldfvdf.length) // 갯수를 확인 할 수 있다
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;variable변수&quot;&gt;&lt;strong&gt;Variable(변수)&lt;/strong&gt;&lt;/h1&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//대입연산자 1은 상수&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//a는 변수 (변할 수 있다), 2는 상수 (항상 상, 언제나 2이다.)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;template-literals-문자를-표현&quot;&gt;&lt;strong&gt;Template literals (문자를 표현)&lt;/strong&gt;&lt;/h1&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;k8805&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Dear &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 
Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa egoing qui officia deserunt mollit anim id est laborum. &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;url&quot;&gt;&lt;strong&gt;URL&lt;/strong&gt;&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;http://opentutorials.org:3000/main?id=HTML&amp;amp;page=12&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;http--protocol통신규칙이라-한다-사용자가-서버에-접속할때-어떤방식으로-통신할-것인가에-대한-부분-웹브라우저-와-웹서버가-서로-데이터를-주고받기위한-통신규칙&quot;&gt;http : protocol통신규칙이라 한다. 사용자가 서버에 접속할때 어떤방식으로 통신할 것인가에 대한 부분 (웹브라우저 와 웹서버가 서로 데이터를 주고받기위한 통신규칙)&lt;br /&gt;&lt;br /&gt;&lt;/h5&gt;

&lt;h6 id=&quot;opentutorialsorg---host라한다domain이라고도-부른다-인터넷에-접속되어있는-각각의-컴퓨터를-칭한다-&quot;&gt;opentutorials.org :  host라한다(domain이라고도 부른다) 인터넷에 접속되어있는 각각의 컴퓨터를 칭한다. &lt;br /&gt;&lt;br /&gt;&lt;/h6&gt;
&lt;p&gt;3000 : 포트번호라 한다. 한대의 컴퓨터 안에 여러대의 서버가 있을 수 있다. 그러면 클라이언트가 접속했을 때 그중에 어떤 서버와 통신 할 지 애매 하다 
  그래서 접속할 때 접속할때 3000이라 하면 3000번 포트에 연결되어 있는 서버와 통신하게 된다.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h6 id=&quot;80번-port는-전세계적으로-약속되어-있기에-http를-통해-접속했으면-웹서버에-접속한것이다-80을-생략한것이다&quot;&gt;80번 port는 전세계적으로 약속되어 있기에 http를 통해 접속했으면 웹서버에 접속한것이다. 80을 생략한것이다.&lt;br /&gt;&lt;br /&gt;&lt;/h6&gt;
&lt;p&gt;main : path라고 한다. 어떤파일인지 가르킨다.&lt;br /&gt;&lt;br /&gt;
id=HTML&amp;amp;page=12 : queryString 이라고 한다. 내가읽고 싶은 정보는 html 에 12페이지 이다  쿼리스트링의 시작은 ? 이며 값과 값은 &amp;amp; 쓰기로 약속 되어있고 값의 이름과 값은 =로 구분하기로 약속되어 있다.&lt;/p&gt;</content><author><name>동센</name></author><summary type="html">web browser 가 web server 한테 정보를 요청하면 web server 그정보를 찾아서 web browser에게 응답해준다.</summary></entry></feed>