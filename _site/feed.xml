<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-05-15T09:41:15+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">juntae</title><subtitle>JavaScript And Node.js</subtitle><author><name>동센</name></author><entry><title type="html">[nodejs]라우터-주소체계변경</title><link href="http://localhost:4000/nodejs3/" rel="alternate" type="text/html" title="[nodejs]라우터-주소체계변경" /><published>2020-05-15T00:00:00+09:00</published><updated>2020-05-15T00:00:00+09:00</updated><id>http://localhost:4000/nodejs3</id><content type="html" xml:base="http://localhost:4000/nodejs3/"></content><author><name>동센</name></author><summary type="html"></summary></entry><entry><title type="html">[nodejs]정적파일 서비스</title><link href="http://localhost:4000/nodejs/" rel="alternate" type="text/html" title="[nodejs]정적파일 서비스" /><published>2020-05-15T00:00:00+09:00</published><updated>2020-05-15T00:00:00+09:00</updated><id>http://localhost:4000/nodejs</id><content type="html" xml:base="http://localhost:4000/nodejs/">&lt;p&gt;images 디렉토리 만들어주고&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.use(express.static('public'));//public 디렉토리 안에서 static 파일을 찾겠다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그다음 본문 로직에&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;img src=&quot;/images/hello.jpg&quot; style=&quot;width:300px; display:block; margin-top:10px;&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>동센</name></author><summary type="html">images 디렉토리 만들어주고 app.use(express.static('public'));//public 디렉토리 안에서 static 파일을 찾겠다.</summary></entry><entry><title type="html">[nodejs]에러처리</title><link href="http://localhost:4000/nodejs2/" rel="alternate" type="text/html" title="[nodejs]에러처리" /><published>2020-05-15T00:00:00+09:00</published><updated>2020-05-15T00:00:00+09:00</updated><id>http://localhost:4000/nodejs2</id><content type="html" xml:base="http://localhost:4000/nodejs2/">&lt;p&gt;존재하지 않는 페이지를 찾았을때 404 에러가 나타나는데.
express 기준&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.use(function(req, res, next){
  res.status(404).send('Sorry cant find that!');
}) //추가해준다
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;페이지에 에러가 있을 경우(서버에러 500)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; next(err); //다음 미들웨어를 호출하는 것 에러를 던진다 생각하면 된다.
 
 
 app.use(function(err, req, res, next){ //첫번째는 next에 담긴 err가 넘어오고
  res.status(500).send('Something broke!');
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>동센</name></author><summary type="html">존재하지 않는 페이지를 찾았을때 404 에러가 나타나는데. express 기준</summary></entry><entry><title type="html">[AWS]S3 (Simple Storage Service)</title><link href="http://localhost:4000/awss3-simple-storage-service/" rel="alternate" type="text/html" title="[AWS]S3 (Simple Storage Service)" /><published>2020-05-14T00:00:00+09:00</published><updated>2020-05-14T00:00:00+09:00</updated><id>http://localhost:4000/awss3-simple-storage-service</id><content type="html" xml:base="http://localhost:4000/awss3-simple-storage-service/">&lt;p&gt;파일을 저장하는 서비스 라고 생각하면 된다.&lt;/p&gt;</content><author><name>동센</name></author><summary type="html">파일을 저장하는 서비스 라고 생각하면 된다.</summary></entry><entry><title type="html">[얄코] GraphQL</title><link href="http://localhost:4000/graphql/" rel="alternate" type="text/html" title="[얄코] GraphQL" /><published>2020-05-13T00:00:00+09:00</published><updated>2020-05-13T00:00:00+09:00</updated><id>http://localhost:4000/graphql</id><content type="html" xml:base="http://localhost:4000/graphql/">&lt;p&gt;기존 REST API는&lt;/p&gt;

&lt;p&gt;메소드와 URL을 조합해서, 예측 가능하고 일정한 정보와 작업을 요청하는 것이다. 버튼마다 나오는 것이 확실한 자판기 처럼 하지만 불편할 때가 있다.&lt;/p&gt;

&lt;p&gt;ex) 국어강사가 학생들의 국어 성적을 보고자 하는데 요청을 보낼때 학번, 이름, 국어 성적이면 충분하다.
			(도메인)/classes/(반idx)/students 이렇게 요청을 보내면 쓸때없는 정보들도 다같이 들고온다. (주소, 키, 성별,등등) 즉, 데이터 소모가 심하다.
			결국 두번을 요청해야지 필요한 정보만 갖고올 수 있다.&lt;/p&gt;

&lt;p&gt;GraphQL 은 body에 들어간 데이터로 유도리 있게 요청이 가능하다. 즉 여러댑스를 한 정보에 다 받아올 수 있는 것.
ex) (도메인)/graphql post 에 body에 담에서 보내면 된다.
insert 는&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;서버에 지정된 함수 이름을 적고.&lt;/li&gt;
  &lt;li&gt;거기에 정보들을 넣어 보내면 된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;update delete 도 마찬가지&lt;/p&gt;</content><author><name>동센</name></author><summary type="html">기존 REST API는</summary></entry><entry><title type="html">[얄코]REST API</title><link href="http://localhost:4000/nodejsexpresshello-world1/" rel="alternate" type="text/html" title="[얄코]REST API" /><published>2020-05-12T00:00:00+09:00</published><updated>2020-05-12T00:00:00+09:00</updated><id>http://localhost:4000/nodejsexpresshello-world1</id><content type="html" xml:base="http://localhost:4000/nodejsexpresshello-world1/">&lt;p&gt;REST API는 정보들이 주고받아지는 데 있어서 개발자들 사이에 널리 쓰이는 일종의 형식&lt;/p&gt;

&lt;p&gt;메소드와 URL을 조합해서, 예측 가능하고 일정한 정보와 작업을 요청하는 것이다. 버튼마다 나오는 것이 확실한 자판기 처럼&lt;/p&gt;

&lt;p&gt;어떤 기수링나 제품이 아니라, 형식이기 때문에 어떤 프로그래밍 언어를 쓰든 폼에 맞춰서 기능을 만들어내면 된다.&lt;/p&gt;

&lt;p&gt;REST API 는 결국 어떤 URI에 어떤 메소드를 사용할지 개발자들 사이에 널리 지켜지는 약속이다.&lt;/p&gt;

&lt;p&gt;ex) https://(도메인)/classes  이면 아마도 학원의반들 목록을 받아오는 요청 일것이다.
 그리고 https://(도메인)/classes/2 를 붙인 idx 고유 번호가 따라붙으면 보통은 인덱스 번호가 이 숫자인 반의 정보가 온다.&lt;/p&gt;

&lt;p&gt;REST API에서는 GET, POST, PUT ,DELETE, PATCH 를 주로 사용한다.
 POST, PUT, PATCH 에는 BODY 란 주머니가 있어서. 정보들을 GET 이나 DELETE 보다 많이 비교적 안전하게 보낼 수 있다.&lt;/p&gt;

&lt;p&gt;GET 는 주로 데이터를 read 하는데 사용하기
POST 는 create, 새로운 정보를 추가하는데 사용된다. url 로  https://(도메인)/classes/2/students 주고 body에 새 학생의 정보를 실어보낸다. 보통 idx 는 정보가 추가되면서 생성되기 때문에 따로 idx 를 줄 필요가 없다.  하지만 update 를 한다면,&lt;/p&gt;

&lt;p&gt;PUT 또는 PATCH 에 BODY에 실어서 정보를 보낸다.&lt;/p&gt;

&lt;p&gt;PUT은 정보를 통째로 갈아 끼울 때 (ex) 이름 : 연두부, 성별 : 남자, 출석 :2   =&amp;gt; 이름 :연놀부, 성별 : 여자, 출석 : 3
PATCH 는 정보를 정보 중 일부를 바꿀때&lt;/p&gt;

&lt;p&gt;REST API 를 보낼때 HTTP 규약에 따라 신호를 전송한다.&lt;/p&gt;</content><author><name>동센</name></author><summary type="html">REST API는 정보들이 주고받아지는 데 있어서 개발자들 사이에 널리 쓰이는 일종의 형식</summary></entry><entry><title type="html">[nodejs] Express 미들웨어</title><link href="http://localhost:4000/nodejs-express/" rel="alternate" type="text/html" title="[nodejs] Express 미들웨어" /><published>2020-05-07T00:00:00+09:00</published><updated>2020-05-07T00:00:00+09:00</updated><id>http://localhost:4000/nodejs-express</id><content type="html" xml:base="http://localhost:4000/nodejs-express/">&lt;p&gt;Express 의 중요 기능 2가지&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;라우터&lt;/li&gt;
  &lt;li&gt;미들웨어&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;소프트웨어를 만들때 처음부터 끝까지 다만드는 경우는 없다.
다른사람이 만든 소프트웨어를 부품으로 해서 만든다. 이것을 미들웨어라고 생각하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//로설치&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;body 는 웹브라우저에서 요청한 정보 본체를 뜻한다.&lt;/p&gt;

&lt;p&gt;parser 는 분석&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bodyParser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;body-parser&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//맨위에 선언&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//로고쳐서 실행시켜준다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;압축하기(데이터가 너무많으면 압축을 해야한다.)&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compression&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compression&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requrie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;compression&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;미들웨어 만들기.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//공통으로 된 함수 &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//ex)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./data&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filelist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//글목록을 표현해주는 기능&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filelist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//그다음에 호출되어야 할 미들웨어가 담겨있다.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>동센</name></author><summary type="html">Express 의 중요 기능 2가지 라우터 미들웨어</summary></entry><entry><title type="html">[nodejs] 페이지 생성 구현2</title><link href="http://localhost:4000/nodejs-2/" rel="alternate" type="text/html" title="[nodejs] 페이지 생성 구현2" /><published>2020-05-07T00:00:00+09:00</published><updated>2020-05-07T00:00:00+09:00</updated><id>http://localhost:4000/nodejs-2</id><content type="html" xml:base="http://localhost:4000/nodejs-2/">&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.get('/create',function(request,response){ //get방식일떄

app.post('/create_process',function(request,response){ //post방식
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;쿼리 스트링이 아닌 방식으로 바꿀려면&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href=&quot;/update/?id=${sanitizedTitle}&quot;&amp;gt;update&amp;lt;/a&amp;gt;
에서
&amp;lt;a href=&quot;/update/${sanitizedTitle}&quot;&amp;gt;update&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;삭제기능&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;form action=&quot;/delete_process&quot; method=&quot;post&quot;&amp;gt; //action 에 delete 앞에 /를 주게되면 최상위 path 바로밑으로 감
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;express 는 리다이렉션 기능을 편리하게 제공하고 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;response.redirect //를 사용하면 된다
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>동센</name></author><summary type="html">``` app.get(‘/create’,function(request,response){ //get방식일떄</summary></entry><entry><title type="html">[AWS]Auto Scaling (오토스케일링)</title><link href="http://localhost:4000/aws/" rel="alternate" type="text/html" title="[AWS]Auto Scaling (오토스케일링)" /><published>2020-05-07T00:00:00+09:00</published><updated>2020-05-07T00:00:00+09:00</updated><id>http://localhost:4000/aws</id><content type="html" xml:base="http://localhost:4000/aws/">&lt;p&gt;컴퓨터가 필요하면 자동으로 생성하고 필요없으면 자동으로 삭제해준다.(과금이 발생하지 않게 해주는 기능)&lt;/p&gt;

&lt;p&gt;AUTO SCALING 목록에 보면
시작구성과, Auto Scaling group 이 있다.
먼저 Auto Scaling group에 먼저 생성을 해준다. 그러면&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;오토스케일의 이미지를 선택한다&lt;/li&gt;
  &lt;li&gt;이미지화 시켯던 내AMI를 선택한다.&lt;/li&gt;
  &lt;li&gt;인스턴스 성능 선택한다.&lt;/li&gt;
  &lt;li&gt;name 정하고 스토리지 정하고&lt;/li&gt;
  &lt;li&gt;시큐리티 그룹을 만든다.&lt;/li&gt;
  &lt;li&gt;그다음 오토스케일 그룹을 만드는 것이 나오는데&lt;/li&gt;
  &lt;li&gt;1번탭에 몇개의 인스턴스로 지정하는지 로드밸런싱 연결할건지 등등..&lt;/li&gt;
  &lt;li&gt;2번탭의(Confilgure scaling pollcles:조정 정책 구성)   첫번째 (이 그룹을 초기 크기로 유지) 가있는데 이건 1번탭에서 예를 들어 10개를 생성했다고 치고 그 10개중에서 4개의 인스턴스가 죽었다고 가정하면 그 죽은 인스턴스를 자동생성해준다.
두번째는 (조정 정책을 사용하여 이 그룹의 용량 조정)최대와 최소의 인스턴스를 설정해준다. 예를들어 각각의 input 박스에 1과 3을 입력하면 최대1개이상과 3개이하의 인스턴스를 생성한다.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>동센</name></author><summary type="html">컴퓨터가 필요하면 자동으로 생성하고 필요없으면 자동으로 삭제해준다.(과금이 발생하지 않게 해주는 기능)</summary></entry><entry><title type="html">[nodejs]express(Hello World!)</title><link href="http://localhost:4000/nodejs/" rel="alternate" type="text/html" title="[nodejs]express(Hello World!)" /><published>2020-05-07T00:00:00+09:00</published><updated>2020-05-07T00:00:00+09:00</updated><id>http://localhost:4000/nodejs</id><content type="html" xml:base="http://localhost:4000/nodejs/">&lt;p&gt;nodejs 에서 가장많이 사용하는 프레임웤&lt;/p&gt;

&lt;p&gt;npm install express –save 으로 설치&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var express = require('express') //express 모듈을 load 해온다 const 는 상수 바뀌지않음.
var app = express() //express 호출 (함수)

app.get('/' , (req, res) =&amp;gt; res.send('/'))//첫번째 인자는 경로, 두번째는 접속했을때 호출될 함수가 표현되어있음.(라우터라 생각하면됨)
//(라우팅라 생각하면됨(라우팅은 경로 즉 길을가고있는데 갈림길 이라 생각하면된다.))
app.get('/page', function(req, res){
  return res.send('/page');
}) //위에 app.get 이랑 똑같은 로직, 위에께 최신 밑에께 구버전

app.listen(3000, () =&amp;gt; console.log('Example app listening on port 3000!'))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>동센</name></author><summary type="html">nodejs 에서 가장많이 사용하는 프레임웤</summary></entry></feed>